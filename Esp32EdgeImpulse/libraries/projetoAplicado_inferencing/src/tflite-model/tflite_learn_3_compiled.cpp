/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 17.10.2024 11:49:53

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 70336;
#else
constexpr int kTensorArenaSize = 69312;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 27232, -36958, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00013122029486112297, 9.4459821411874145e-05, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 54,-42,-39,65,-52,-4,-45,47,127,-10,-52,-33,-19,37,-18,2,100,-87,-36,-73,58,29,67,-62,-17,-28,15,45,12,-17,-17,54, 
  /* [1][0][][] */ 44,78,75,-53,-62,79,3,17,-66,-43,42,110,99,49,39,13,-31,10,-53,-77,-65,40,12,109,71,55,-64,3,88,-127,-95,-10, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0051850862801074982, 0.0037325196899473667, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -949, 824, 815, -755, -1291, 942, -1219, 736, 1676, 2177, 514, 744, 376, 609, 611, -1451, -620, -655, -703, -1090, -1340, 629, -1450, 656, -60, -364, -163, -917, -1102, 1947, -741, -764, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.0120503399521112e-05, 4.3593176087597385e-05, 4.4153395720059052e-05, 5.4262687626760453e-05, 4.0472605178365484e-05, 4.1251249058404937e-05, 4.5022890844848007e-05, 4.2258769099134952e-05, 5.5541859182994813e-05, 4.6814078814350069e-05, 5.7991062931250781e-05, 4.9556423618923873e-05, 5.356852852855809e-05, 5.9798880101880059e-05, 4.4809286919189617e-05, 4.7919515054672956e-05, 6.0813781601609662e-05, 5.4775511671323329e-05, 4.0797916881274432e-05, 4.241701026330702e-05, 4.2524708987912163e-05, 5.2674786275019869e-05, 4.5271004637470469e-05, 4.8404242988908663e-05, 4.5604465412907302e-05, 5.2154558943584561e-05, 6.2973194872029126e-05, 4.1147261072183028e-05, 4.2498289985815063e-05, 5.2635652536991984e-05, 3.9873288187664002e-05, 4.3800373532576486e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -57,-54,87,-6,96,-31,-91,-116,61,-101,-111,-11,40,5,-52,53,-66,-51,-83,-73,-73,-121,-15,95,-117,8,58,-52,109,-4,-23,-87,65,-64,-113,46,-127,-93,-94,28,75,-89,-117,83,51,-113,109,-38, 
  /* [1][0][][] */ -61,35,-45,18,-18,80,60,13,99,-73,-80,103,53,-4,41,89,31,-38,37,127,-32,8,46,42,8,32,-102,123,32,13,106,-49,-7,119,-13,42,63,80,-7,-37,-40,30,-5,-105,-28,43,-57,-67, 
  /* [2][0][][] */ 36,38,-35,106,-2,-50,105,92,-69,102,-15,111,75,6,94,-76,-123,-24,36,66,-77,-1,114,35,-47,89,34,31,-42,82,86,99,-127,2,-90,-84,-66,109,103,-2,-89,-47,28,-17,-72,117,-52,-87, 
  /* [3][0][][] */ 49,-6,17,-29,-66,31,-97,19,27,4,37,-8,64,61,43,-1,127,64,-49,-1,76,-78,-61,-98,14,-95,-28,69,22,-84,54,-6,-2,-39,-21,-22,-81,-31,22,25,-32,-81,-84,-11,45,12,-45,-73, 
  /* [4][0][][] */ 48,95,-16,33,-51,-36,11,-4,44,68,-19,31,50,-59,-32,-87,24,-22,-70,-7,88,-113,64,6,-2,-16,110,-75,-70,19,-89,-73,116,96,-1,-122,-72,-23,-127,23,-73,-78,-95,-103,20,87,21,42, 
  /* [5][0][][] */ 90,-76,99,102,59,-108,51,60,127,-91,18,-57,22,118,54,63,-15,64,-65,113,44,66,31,-10,-100,-40,-79,-67,70,38,31,-84,-109,23,-69,33,-96,-12,53,45,-66,-30,57,91,-23,34,11,-61, 
  /* [6][0][][] */ 1,-52,84,49,-96,-73,-21,41,-31,-92,-11,-99,59,31,85,-125,26,-15,-15,73,-87,-126,80,34,-56,-93,-21,-71,-45,-118,24,-87,-96,-127,-59,-112,-27,18,-112,53,59,31,3,-31,-117,78,-77,-56, 
  /* [7][0][][] */ 108,55,-20,-27,-61,111,-1,2,127,21,-84,17,51,-68,57,89,6,19,3,120,60,45,6,94,-98,103,4,62,-60,102,-11,43,-12,37,63,112,-90,101,-4,-12,106,-73,99,62,57,6,73,-118, 
  /* [8][0][][] */ 50,34,-25,-52,57,49,-57,13,-6,21,51,100,36,-20,-46,-82,12,107,-18,29,47,11,92,97,-69,91,91,77,-41,37,-40,110,127,-15,73,34,114,13,30,58,83,57,-51,-38,39,9,28,124, 
  /* [9][0][][] */ 39,35,121,69,107,-61,-21,-58,67,83,30,87,9,-31,-56,12,75,43,-52,-28,36,127,-50,-51,127,29,54,60,28,-12,-39,125,118,25,67,21,-27,42,20,5,78,-32,82,-15,116,63,-45,103, 
  /* [10][0][][] */ -54,61,81,-33,2,76,94,18,45,39,30,-47,63,73,-11,30,-75,52,-70,-33,-6,29,46,-38,13,52,-127,-61,-18,61,-58,-51,14,86,77,61,-20,21,-22,42,-11,101,-68,-43,-66,-36,-22,-62, 
  /* [11][0][][] */ 86,14,7,103,112,41,65,29,112,96,-48,97,-10,-51,39,-30,-106,-83,57,48,36,74,31,-75,-105,-64,-65,77,84,-1,33,-5,-127,-41,40,51,-39,82,-18,-28,-5,105,-47,-3,-30,-41,-108,-87, 
  /* [12][0][][] */ -9,47,-28,12,77,1,-11,26,-41,63,-11,12,-49,24,47,-42,-127,-31,-43,-52,24,-1,18,84,-74,-34,30,-70,83,8,-22,93,-114,-41,-44,16,5,-43,-22,49,98,44,-75,-47,-47,-61,-69,67, 
  /* [13][0][][] */ 73,-42,84,79,75,81,71,48,64,-55,19,-15,59,63,58,-15,-127,-45,-44,30,55,-9,90,-21,-63,36,-32,25,-45,-57,65,34,-14,84,-14,37,-47,-5,22,62,-30,62,-23,4,-24,27,-20,-28, 
  /* [14][0][][] */ -54,-82,101,81,86,-10,10,-111,-45,-11,78,73,-34,-57,-64,-52,-101,-60,21,39,-28,39,6,73,-110,-56,-81,50,-83,-92,-65,46,36,-1,-38,19,96,127,35,-86,8,-71,46,47,60,-114,19,-99, 
  /* [15][0][][] */ 2,-56,-48,34,41,-94,24,-106,17,-30,-87,-26,62,-24,-103,-127,96,-12,-96,-8,14,-11,38,68,46,15,49,40,-15,11,24,-111,16,-25,-75,-24,-84,68,69,-96,-16,56,-62,-37,4,-94,-69,-86, 
  /* [16][0][][] */ -42,4,55,-55,16,73,-53,22,18,17,-83,46,2,-46,-47,-59,127,52,45,32,65,44,-35,23,5,31,4,28,-82,4,18,0,-19,37,42,28,-32,21,-38,-62,3,-47,37,70,39,62,91,2, 
  /* [17][0][][] */ -8,-41,44,76,-4,-88,-22,-99,70,-36,82,22,50,55,-73,82,-18,7,55,97,-70,-18,-7,-23,57,82,-110,60,105,-28,-27,56,-73,8,-6,-11,-44,97,-87,8,-61,26,-25,-59,-33,-18,23,-127, 
  /* [18][0][][] */ -104,98,99,-80,-18,-114,-113,-7,-18,61,-96,-56,5,22,50,-54,43,-34,48,-34,89,-56,9,-90,61,-70,-27,127,27,26,-10,32,63,-39,-116,-118,-42,44,-46,50,-49,14,-62,-20,-77,4,14,-14, 
  /* [19][0][][] */ 5,20,58,22,40,-93,77,72,71,-76,15,-26,-102,16,-69,46,119,-114,91,39,-35,61,-68,-3,83,-88,63,-77,-100,-123,-77,28,127,-89,19,-16,-7,-79,-64,-110,28,-125,-95,-2,-94,14,65,-96, 
  /* [20][0][][] */ -26,48,44,68,-105,68,-4,38,-6,-9,-101,-18,-25,62,17,-91,-13,-54,-82,-51,1,-64,-93,-87,67,-92,-68,23,-1,-10,-59,87,127,20,-32,32,18,-53,-36,-125,-102,-53,-105,-115,-42,-79,-79,84, 
  /* [21][0][][] */ 66,54,70,-66,84,-58,73,11,12,-35,-44,34,0,43,-28,-52,-127,-25,24,-1,90,-29,63,-55,16,-59,-65,69,26,4,2,-10,-41,29,-75,-76,95,90,-85,-12,7,12,34,-29,-72,-60,-96,59, 
  /* [22][0][][] */ 4,-50,-82,-109,79,-72,88,26,-86,79,-67,-114,78,-100,-115,-77,14,51,-122,-75,55,-91,4,4,84,-5,-127,91,-74,-91,-73,-123,20,35,-9,-14,-12,-27,-78,-104,-8,-21,-24,75,37,-126,71,-44, 
  /* [23][0][][] */ 41,-72,23,65,96,-96,24,-91,67,-49,87,63,8,-73,30,-10,11,-36,-88,97,87,-59,95,-17,-38,2,12,37,78,44,68,-24,-90,54,8,40,92,13,-90,24,-73,18,20,-127,-58,-76,51,0, 
  /* [24][0][][] */ -92,-93,-90,-56,-84,-118,-48,-90,73,121,81,25,77,67,-36,-86,-127,28,7,-52,82,-76,-52,-52,7,-45,21,59,103,43,3,-67,-53,15,26,31,-52,-67,45,-4,-64,-110,99,-25,21,-28,15,48, 
  /* [25][0][][] */ -94,-76,-79,-14,54,-81,-85,41,42,-77,-59,2,22,5,-96,-27,-105,38,-2,-95,42,56,-15,-57,-33,-86,-127,-5,45,-84,24,77,25,-98,15,52,64,-67,-42,-9,-82,65,-81,-15,65,35,30,10, 
  /* [26][0][][] */ 67,-55,-15,-20,-69,10,-26,-8,-69,-93,89,58,-35,-40,4,1,127,26,-33,-43,-1,45,66,26,47,63,60,51,-1,21,-69,-6,33,-55,-50,-66,-40,45,-32,57,-69,82,37,75,-25,44,-8,84, 
  /* [27][0][][] */ -4,11,-72,-109,-127,-77,-80,-28,28,84,26,-119,-35,42,65,-27,78,-29,50,-97,-104,-3,-42,-14,-89,48,-116,-17,56,16,-45,-24,77,79,-97,-99,-103,-74,-118,78,-108,19,14,6,83,17,59,88, 
  /* [28][0][][] */ 69,-23,66,24,-127,-78,-108,-91,-37,-110,41,47,-96,-101,-15,81,70,87,-87,52,-46,2,-123,-88,-126,59,-100,-70,-90,-91,-20,-37,-119,0,56,52,-3,-121,-59,13,81,23,-106,30,-117,-28,-3,25, 
  /* [29][0][][] */ 77,67,63,-13,-35,50,-74,49,88,5,-44,-35,121,-51,-9,-4,-17,119,50,-18,-24,11,82,51,2,41,15,6,-41,30,114,32,93,20,-17,-6,28,100,38,114,71,112,2,105,34,127,5,27, 
  /* [30][0][][] */ 15,-66,-75,53,-114,47,-77,-26,104,-29,-13,-56,-86,5,48,11,14,24,81,-116,29,-114,-127,33,-99,39,-82,107,-1,-123,-107,-7,-66,-70,-100,-67,3,-29,17,31,78,-77,-24,88,95,-20,127,49, 
  /* [31][0][][] */ 73,-89,22,78,32,50,-71,-99,-40,-29,-83,-87,94,-127,-56,84,8,-87,28,33,49,23,-38,85,95,-118,97,23,-87,-77,35,92,89,3,-88,-17,80,-42,-69,-120,44,-86,-40,50,0,-55,-28,29, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.002276647137477994, 0.0024737047497183084, 0.0025054945144802332, 0.0030791484750807285, 0.0022966272663325071, 0.002340811537578702, 0.002554834121838212, 0.002397983567789197, 0.0031517355237156153, 0.0026564756408333778, 0.0032907160930335522, 0.0028120905626565218, 0.0030397584196180105, 0.0033933010417968035, 0.0025427131913602352, 0.0027192037086933851, 0.0034508919343352318, 0.0031082488130778074, 0.0023150870110839605, 0.0024069629143923521, 0.0024130742531269789, 0.0029890427831560373, 0.0025689133908599615, 0.002746709855273366, 0.0025878357701003551, 0.0029595224186778069, 0.0035734281409531832, 0.0023349106777459383, 0.0024115750566124916, 0.0029868220444768667, 0.0022626188583672047, 0.0024854622315615416, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 3025, -2006, 4084, 3268, 4100, -77, 3809, 5847, -4173, -2723, -1837, 13064, 5069, 4936, 6916, -7857, -2953, 10584, 4967, 8722, 8811, 33551, 26512, 1202, -2278, 2350, 168, -1801, 3622, 3861, 5647, 9957, -96, 569, 11097, 3776, 11986, 3087, 2309, -2477, 4842, -3381, 9585, -15, 227, 3814, -2069, 6687, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00012197357864351943, 0.00017951385234482586, 0.00017196839326061308, 0.00017283593479078263, 0.00012995582073926926, 0.00018359195382799953, 9.4499271654058248e-05, 0.00012212082219775766, 9.8980373877566308e-05, 0.00014872517203912139, 0.00018558852025307715, 6.0264679632382467e-05, 0.00013188115553930402, 0.00010057383042294532, 0.0001279824209632352, 7.8248674981296062e-05, 0.0001446517271688208, 8.9656932686921209e-05, 0.00011454794730525464, 9.1275578597560525e-05, 8.4132443589624017e-05, 3.1736675737192854e-05, 3.8233800296438858e-05, 0.00013610867608804256, 0.0001650245685596019, 0.00010298268898623064, 0.00013245947775430977, 0.00011045027349609882, 0.00012228128616698086, 0.0001119390653911978, 0.00012262907694093883, 8.3238519437145442e-05, 0.00017750909319147468, 0.00017724507779348642, 7.5124684371985495e-05, 0.00015633155999239534, 6.6132975916843861e-05, 0.00020230583322700113, 0.00014432953321374953, 0.00014987985196057707, 0.00011199904838576913, 0.00013128932914696634, 9.0297231508884579e-05, 0.00020850445434916764, 0.00017824707902036607, 0.00013518115156330168, 0.0002211425598943606, 0.00011009149602614343, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -2,21,127,-12,-14,65,6,-100, 
  /* [1][0][][] */ 80,-88,74,-90,-5,-53,127,31, 
  /* [2][0][][] */ 70,59,94,-92,-64,44,127,-17, 
  /* [3][0][][] */ 18,39,-5,-16,7,-49,127,12, 
  /* [4][0][][] */ 127,-28,-63,-25,-98,-64,-13,60, 
  /* [5][0][][] */ 13,61,127,-8,31,-40,18,-41, 
  /* [6][0][][] */ 120,115,-29,127,-94,40,29,95, 
  /* [7][0][][] */ -24,-4,-8,37,36,-123,-127,-43, 
  /* [8][0][][] */ 120,92,-62,100,-83,17,-127,-42, 
  /* [9][0][][] */ 127,-25,-28,36,8,-36,14,-84, 
  /* [10][0][][] */ 75,32,-19,20,-34,127,49,12, 
  /* [11][0][][] */ 127,-14,-20,-105,76,-54,-41,82, 
  /* [12][0][][] */ -47,111,65,-30,6,72,-74,127, 
  /* [13][0][][] */ 127,-9,-71,-2,36,-76,14,-72, 
  /* [14][0][][] */ 102,38,-8,-11,-127,23,-66,-15, 
  /* [15][0][][] */ 11,-7,-92,-53,-123,-74,102,127, 
  /* [16][0][][] */ 19,-33,127,17,117,-76,-47,-38, 
  /* [17][0][][] */ 9,-29,91,-17,127,-63,-73,-6, 
  /* [18][0][][] */ 86,-50,127,35,-17,28,-45,3, 
  /* [19][0][][] */ 87,60,43,-55,-53,-127,31,-41, 
  /* [20][0][][] */ 46,-28,51,127,-1,-64,-65,84, 
  /* [21][0][][] */ 99,-7,-81,-127,61,-66,9,102, 
  /* [22][0][][] */ -29,-103,-77,-40,32,-41,127,-78, 
  /* [23][0][][] */ -26,10,40,-51,-101,-127,-2,-27, 
  /* [24][0][][] */ 127,2,72,51,-1,-23,-115,75, 
  /* [25][0][][] */ 83,40,-14,-105,9,10,-52,127, 
  /* [26][0][][] */ -76,-1,8,-127,103,-7,-32,-96, 
  /* [27][0][][] */ 92,127,-20,-43,2,54,36,2, 
  /* [28][0][][] */ 34,127,-20,20,-12,-35,6,93, 
  /* [29][0][][] */ 127,37,73,115,31,-40,-97,44, 
  /* [30][0][][] */ 127,-82,-79,100,35,-2,-53,73, 
  /* [31][0][][] */ 79,-87,34,40,-70,-96,-127,47, 
  /* [32][0][][] */ -55,-83,-12,-127,20,-58,-9,-49, 
  /* [33][0][][] */ 41,21,17,29,15,-54,127,59, 
  /* [34][0][][] */ -92,35,112,-79,127,-45,-72,76, 
  /* [35][0][][] */ -52,31,8,119,-4,127,41,-27, 
  /* [36][0][][] */ 78,21,-23,-127,49,-1,14,44, 
  /* [37][0][][] */ 35,60,-22,18,-90,127,75,37, 
  /* [38][0][][] */ -24,-73,18,120,25,57,-3,127, 
  /* [39][0][][] */ 16,-7,-127,34,-8,-31,-21,66, 
  /* [40][0][][] */ 41,1,-73,-7,-33,54,-61,127, 
  /* [41][0][][] */ 39,9,9,-38,-121,-127,-4,-7, 
  /* [42][0][][] */ -86,53,-78,99,-7,93,-33,-127, 
  /* [43][0][][] */ -2,-5,-33,-127,-13,7,-11,-72, 
  /* [44][0][][] */ 60,12,30,53,33,127,-56,38, 
  /* [45][0][][] */ -5,65,-17,11,127,-27,-76,-8, 
  /* [46][0][][] */ 46,-66,-8,127,64,23,-28,68, 
  /* [47][0][][] */ -26,-98,57,-23,127,5,41,20, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0021660097409039736, 0.0031878112349659204, 0.0030538188293576241, 0.0030692245345562696, 0.002307758666574955, 0.0032602304127067327, 0.001678120344877243, 0.0021686244290322065, 0.0017576958052814007, 0.0026410652790218592, 0.0032956853974610567, 0.0010701816063374281, 0.0023419486824423075, 0.0017859925283119082, 0.0022727148607373238, 0.0013895417796447873, 0.002568728756159544, 0.001592129934579134, 0.0020341451745480299, 0.0016208739252761006, 0.0014940259279683232, 0.0005635806592181325, 0.00067895674146711826, 0.0024170211981981993, 0.0029305103234946728, 0.00182876898907125, 0.002352218609303236, 0.001961378613486886, 0.0021714740432798862, 0.0019878165330737829, 0.0021776501089334488, 0.0014781516510993242, 0.0031522107310593128, 0.0031475222203880548, 0.0013340659206733108, 0.0027761396486312151, 0.0011743910145014524, 0.0035925519187003374, 0.0025630071759223938, 0.0026615699753165245, 0.0019888817332684994, 0.0023314389400184155, 0.0016035004518926144, 0.0037026270292699337, 0.0031653158366680145, 0.0024005500599741936, 0.0039270548149943352, 0.0019550074357539415, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -9784, -3196, -2686, -9794, 1090, -1477, 12758, 10639, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00011562706640688702, 0.00016672300989739597, 5.7860466768033803e-05, 0.00013473902072291821, 0.00011215443373657763, 0.00010853850108105689, 7.7817021519877017e-05, 0.00018924741016235203, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-26,32,-25,36,57,2,38,111,-91,49,3,-49,48,11,-43,18,-31,-18,-22,17,-64,12,-24,-49,-33,-43,-41,-23,69,-36,44,21,-54,6,-45,71,-71,-60,1,26,-17,-76,-8,52,-42,59,-43, 
  /* [1][0][][] */ 43,4,-1,68,61,59,14,36,72,-85,-9,1,36,9,-47,-14,-30,-41,-62,-10,13,-41,45,76,3,-51,-8,31,-18,46,-65,127,-30,30,-29,-36,-55,-16,-19,-22,-54,-11,-35,29,15,-17,7,-91, 
  /* [2][0][][] */ -45,-32,-94,33,-104,-48,-9,60,-122,-90,-97,-41,-34,57,-115,16,77,-107,53,-11,123,88,-33,6,54,102,29,-112,-65,7,97,8,-34,81,83,-72,66,-4,107,122,-52,127,62,-2,-106,93,-43,85, 
  /* [3][0][][] */ -12,-23,-3,43,-18,11,-7,53,61,78,-127,-33,15,-31,-24,77,-44,-13,-7,37,-12,13,68,17,13,21,-54,46,-25,17,-39,-16,9,10,30,8,61,-5,34,-6,-56,75,58,12,21,-28,-32,-34, 
  /* [4][0][][] */ -17,-70,8,-61,-14,79,-46,-54,-4,-34,82,41,-53,-5,-2,23,54,19,-28,43,-79,-37,107,-14,-99,-25,-2,14,15,-14,8,60,-41,62,-14,67,-29,45,-1,18,-26,35,-33,48,127,67,-12,13, 
  /* [5][0][][] */ -59,-68,45,-127,-25,20,-27,-55,-2,69,-45,69,-78,29,50,9,62,50,62,12,21,6,-17,-58,36,-63,9,-48,-19,-26,40,-82,4,-34,58,3,-24,30,45,52,92,10,24,-26,-6,-3,-28,35, 
  /* [6][0][][] */ -61,-42,46,46,-44,-49,-6,-65,-86,11,-127,34,18,-61,34,3,-18,18,14,109,-8,-8,68,40,-73,-16,51,16,21,-36,-53,-66,-39,31,52,-105,-39,75,32,-13,-76,62,69,-70,-8,-57,-31,-1, 
  /* [7][0][][] */ 13,-1,21,-9,21,27,-45,-40,-127,-36,89,18,5,-38,22,12,21,39,13,-27,-36,13,-10,-43,43,17,-35,10,-1,-33,-36,-45,-100,-61,-40,-10,55,-30,-30,0,52,5,42,-24,13,-52,34,13, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0052273138426244259, 0.0075372792780399323, 0.0026157787069678307, 0.0060913348570466042, 0.0050703217275440693, 0.0049068513326346874, 0.0035179825499653816, 0.008555571548640728, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -3963, -5562, 10401, -2602, -2103, -10531, -7319, 10951, 8614, -3213, -4150, -7572, 965, 14069, 9598, 72, 11237, -8800, 10376, -3307, 21216, -2092, -1613, -2218, 6559, -4816, -175, -4853, 15254, -32810, -5697, -1569, -2861, -68, -853, -1907, 10311, -7830, 838, -16934, -4042, 12478, -7321, -1243, 3074, 238, 8365, -4225, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00014975365775171667, 0.00012508884537965059, 7.4889474490191787e-05, 0.00010000816109823063, 0.00013145878619980067, 0.00010479186312295496, 0.00013580612721852958, 0.00013817807484883815, 0.00011479998647700995, 0.00038019506609998643, 0.00018799342797137797, 6.4510080846957862e-05, 0.00018707932031247765, 8.6995525634847581e-05, 0.00010671209020074457, 0.00014838557399343699, 7.4393559771124274e-05, 8.0401834566146135e-05, 9.1079149569850415e-05, 0.00019332958618178964, 6.3297753513325006e-05, 0.00020918699738103896, 0.00014417733473237604, 0.00015086558414623141, 0.00014091072080191225, 0.00027132953982800245, 0.0002168836654163897, 0.00021608799579553306, 5.9075777244288474e-05, 7.6720403740182519e-05, 0.00011920882388949394, 0.00011290700786048546, 9.7584306786302477e-05, 0.00019745444296859205, 9.2672817118000239e-05, 0.00020636188855860382, 0.00012336872168816626, 6.883803871460259e-05, 6.0065118304919451e-05, 7.7971883001737297e-05, 0.00026119875838048756, 7.4473507993388921e-05, 0.00018910871585831046, 9.0588859166018665e-05, 0.00013133369793649763, 7.0647271058987826e-05, 0.0001369619567412883, 0.00019028972019441426, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 87,74,16,64,-4,12,-33,18,38,-108,24,32,26,-96,-30,26,103,33,-82,3,62,19,-24,-8,59,24,14,7,-102,10,-3,-54,127,11,106,7,-35,29,127,57,-67,66,-93,-78,26,-117,-38,-9, 116,127,-47,101,28,73,-44,-127,58,10,127,25,-14,-22,-8,5,-81,127,-97,37,41,127,42,-15,19,9,4,127,-120,81,-27,-127,8,-39,12,66,-69,127,121,73,-127,-99,60,-4,-2,3,-127,88, 62,53,-5,49,2,3,-18,31,31,-110,30,40,21,-65,-14,-26,96,-3,-42,-8,57,11,-39,57,48,127,15,-2,21,7,-22,-31,122,8,65,-4,-11,46,111,31,-37,65,43,62,31,80,16,-11, 
  /* [0][1][][] */ -20,-33,-100,108,28,55,76,-10,38,77,-61,127,115,7,-22,-71,-19,115,68,-12,-102,-3,29,-106,21,-7,18,20,-48,98,26,58,53,127,30,45,-90,7,-77,67,82,-3,83,-127,-1,-127,-14,101, 37,-55,-48,-127,127,2,127,-60,-127,127,3,46,-127,127,127,-7,-127,95,-7,127,24,-33,127,-11,-127,77,37,-94,-113,38,-127,108,79,-113,7,127,127,81,10,127,103,-100,-15,7,90,-60,-3,1, -6,-29,-127,62,-8,127,51,-16,39,56,-50,86,-26,11,-24,-16,-66,121,127,-38,-127,17,-53,127,7,43,23,28,66,114,41,44,17,-23,-37,-63,-48,-13,-28,-12,42,64,-4,124,-8,112,-36,114, 
  /* [0][2][][] */ -30,-7,-19,25,-3,26,2,14,34,-52,1,26,26,-66,-46,28,110,26,5,10,-66,44,-7,-1,15,-23,-9,10,-25,10,50,13,11,21,127,12,-18,108,83,57,34,93,127,-35,-55,-116,7,0, -127,7,-63,57,-110,-4,-54,2,8,94,-76,38,-32,-22,-18,127,-78,74,-120,-24,-63,45,-3,-38,-13,74,-127,-17,-127,127,87,30,17,-18,11,26,-33,82,-16,91,-41,-127,-106,-36,-127,61,-103,127, -23,-8,-3,22,17,7,6,8,27,-87,-9,-1,2,-65,-16,6,112,-19,89,28,-65,12,-2,42,21,15,-10,0,6,10,57,14,35,2,73,25,-9,87,99,33,37,77,-41,62,-29,89,5,-22, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0095070581883192062, 0.0079412208870053291, 0.0047543318942189217, 0.0063489824533462524, 0.0083456141874194145, 0.0066526741720736027, 0.0086216041818261147, 0.0087721860036253929, 0.0072880364023149014, 0.024136548861861229, 0.011934695765376091, 0.0040953997522592545, 0.011876664124429226, 0.0055228802375495434, 0.0067745791748166084, 0.0094202058389782906, 0.0047228485345840454, 0.0051042819395661354, 0.0057821273803710938, 0.012273459695279598, 0.0040184352546930313, 0.013280162587761879, 0.0091530466452240944, 0.0095776477828621864, 0.0089456671848893166, 0.01722525991499424, 0.013768782839179039, 0.013718269765377045, 0.0037504048086702824, 0.0048705674707889557, 0.0075679300352931023, 0.0071678613312542439, 0.0061951051466166973, 0.01253532525151968, 0.0058833006769418716, 0.013100811280310154, 0.0078320195898413658, 0.0043701585382223129, 0.0038132127374410629, 0.0049500172026455402, 0.016582110896706581, 0.0047279242426156998, 0.012005499564111233, 0.0057510016486048698, 0.0083376727998256683, 0.0044850166887044907, 0.008694981224834919, 0.012080475687980652, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 56012, 11411, 1535, 2336, 6973, 4759, 5534, 7150, 7112, -7806, 19060, 2626, 15824, 3132, 7312, 2941, 10490, -1269, 12981, 667, 3674, -1340, 5578, 7814, 3003, -7721, 4338, 16099, 1636, 13095, 2082, 12650, 794, 7560, 170, -3530, 4476, 3143, 278, 2211, 15344, -1755, 28343, 5340, 1877, 10994, 5672, -2412, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 1.8887652913690545e-05, 7.195264333859086e-05, 0.00014949087926652282, 9.9641074484679848e-05, 9.7780590294860303e-05, 9.8026168416254222e-05, 0.00013060432684142143, 8.8657689047977328e-05, 7.0064037572592497e-05, 9.1296184109523892e-05, 5.5449494539061561e-05, 0.00010373728582635522, 5.358975613489747e-05, 0.00010817297152243555, 8.4949875599704683e-05, 0.00010423603816889226, 6.2935410824138671e-05, 0.00012128915841458365, 7.3067676567006856e-05, 0.00011691752297338098, 0.00017527127056382596, 7.9174162237904966e-05, 0.00010749234206741676, 8.2881328125949949e-05, 0.00013569449947681278, 8.2460559497121722e-05, 0.00011338466720189899, 6.0814199969172478e-05, 0.00012515520211309195, 6.4673702581785619e-05, 0.00010751649824669585, 7.244935113703832e-05, 9.1392765170894563e-05, 0.00010318640852347016, 0.00010525006655370817, 0.0001149325180449523, 0.00012081042950740084, 0.00010579995432635769, 0.00014976953389123082, 0.00010652536730049178, 6.049924559192732e-05, 0.0001286376646021381, 3.0505229005939327e-05, 8.76242556842044e-05, 0.0001192160343634896, 7.4247087468393147e-05, 0.00010195495269726962, 0.0001470900751883164, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,39,-38,-28,74,38,-6,-66, 
  /* [1][0][][] */ -5,-56,-33,-21,-47,-127,0,13, 
  /* [2][0][][] */ -62,38,-9,-50,-55,30,-46,127, 
  /* [3][0][][] */ 39,26,52,-11,-47,-127,38,-20, 
  /* [4][0][][] */ 13,53,-127,2,-102,93,38,24, 
  /* [5][0][][] */ -25,52,22,-27,-91,-127,-54,-11, 
  /* [6][0][][] */ -33,127,100,-37,-44,-9,-3,-35, 
  /* [7][0][][] */ -18,-11,50,59,12,-127,-11,66, 
  /* [8][0][][] */ 119,17,-76,110,-91,-73,-127,-11, 
  /* [9][0][][] */ 127,-27,-80,-55,-12,-47,-38,125, 
  /* [10][0][][] */ -99,10,15,127,-3,87,19,-107, 
  /* [11][0][][] */ 9,6,53,-31,22,127,116,101, 
  /* [12][0][][] */ -60,-84,-35,-61,127,-12,-26,44, 
  /* [13][0][][] */ -15,-7,-19,42,28,-127,61,85, 
  /* [14][0][][] */ 63,65,92,29,63,-127,-82,-30, 
  /* [15][0][][] */ -20,107,127,80,2,34,55,-112, 
  /* [16][0][][] */ -72,-19,27,-83,127,26,-36,6, 
  /* [17][0][][] */ 48,-48,-47,-8,-10,127,-22,52, 
  /* [18][0][][] */ -50,127,89,-67,-96,42,81,-90, 
  /* [19][0][][] */ 14,127,108,117,-19,43,32,24, 
  /* [20][0][][] */ -1,-15,61,-127,-60,0,47,-18, 
  /* [21][0][][] */ -112,85,44,-104,107,62,127,11, 
  /* [22][0][][] */ 96,-16,-107,54,53,-31,-58,127, 
  /* [23][0][][] */ 42,-73,-127,-32,74,-18,-66,92, 
  /* [24][0][][] */ 60,-9,-103,11,-67,49,-114,127, 
  /* [25][0][][] */ -3,-10,59,23,127,-11,-97,-56, 
  /* [26][0][][] */ 23,108,127,-19,-47,-22,67,-61, 
  /* [27][0][][] */ -50,11,103,-56,-2,-10,98,-127, 
  /* [28][0][][] */ 46,1,71,127,57,-38,46,83, 
  /* [29][0][][] */ 92,95,110,36,-79,38,-127,87, 
  /* [30][0][][] */ 64,2,-104,63,-127,-40,-61,54, 
  /* [31][0][][] */ 33,127,98,-53,-74,45,126,-108, 
  /* [32][0][][] */ 81,-5,-2,27,122,127,45,-25, 
  /* [33][0][][] */ 5,-38,-127,1,22,-23,-39,72, 
  /* [34][0][][] */ 26,-54,27,-127,3,81,-26,13, 
  /* [35][0][][] */ -20,30,90,-2,18,-127,2,-27, 
  /* [36][0][][] */ 0,19,-32,-127,-13,14,13,-44, 
  /* [37][0][][] */ 76,-14,-11,-92,-75,127,-52,-68, 
  /* [38][0][][] */ 91,-42,-16,90,55,33,-17,127, 
  /* [39][0][][] */ 127,86,40,63,2,101,-58,-1, 
  /* [40][0][][] */ 34,-115,-127,-10,-5,-9,-37,91, 
  /* [41][0][][] */ 11,-43,-127,-103,4,-37,-30,-16, 
  /* [42][0][][] */ 66,127,102,118,-121,-50,43,65, 
  /* [43][0][][] */ 126,-42,-102,-127,-85,-42,42,75, 
  /* [44][0][][] */ 22,81,98,-76,-101,-13,92,-127, 
  /* [45][0][][] */ 49,19,-127,59,-54,46,23,105, 
  /* [46][0][][] */ 58,-30,-58,-127,20,-25,-20,43, 
  /* [47][0][][] */ 88,-101,127,-34,55,-31,15,12, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00046616149484179914, 0.001775845536030829, 0.0036895475350320339, 0.0024592168629169464, 0.0024132987018674612, 0.0024193597491830587, 0.00322341313585639, 0.0021881386637687683, 0.0017292331904172897, 0.0022532586008310318, 0.0013685353333130479, 0.0025603144895285368, 0.0013226355658844113, 0.0026697905268520117, 0.0020966269075870514, 0.0025726240128278732, 0.0015532934339717031, 0.0029935077764093876, 0.0018033654196187854, 0.0028856126591563225, 0.0043258271180093288, 0.0019540779758244753, 0.0026529920287430286, 0.0020455736666917801, 0.0033490424975752831, 0.0020351887214928865, 0.0027984189800918102, 0.0015009402995929122, 0.0030889245681464672, 0.0015961957396939397, 0.0026535883080214262, 0.0017881045350804925, 0.0022556423209607601, 0.0025467183440923691, 0.0025976509787142277, 0.0028366211336106062, 0.0029816925525665283, 0.0026112226769328117, 0.0036964251194149256, 0.0026291264221072197, 0.0014931670157238841, 0.0031748744659125805, 0.00075289205415174365, 0.0021626327652484179, 0.0029423416126519442, 0.001832474023103714, 0.0025163250975310802, 0.0036302939988672733, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -17184, -50761, 3474, 9483, -25209, -2554, -30986, 696, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00011907998123206198, 4.164638085057959e-05, 3.4589753340696916e-05, 4.6353936340892687e-05, 4.3100873881485313e-05, 4.9907845095731318e-05, 4.0647875721333548e-05, 6.5569940488785505e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 60,54,-90,59,15,22,-110,-41,9,-16,-3,-46,-23,-9,42,-7,55,-22,43,-21,23,-47,44,12,6,-35,-23,21,-21,-9,-23,12,59,18,12,5,127,56,46,-33,-6,-9,-16,-33,81,25,19,-57, 
  /* [1][0][][] */ 80,34,23,0,45,83,-14,-38,38,75,-47,-65,127,-25,11,40,25,35,14,-81,123,-37,43,62,32,26,48,13,47,-85,54,83,52,106,12,124,64,19,15,25,86,22,29,33,13,53,105,-71, 
  /* [2][0][][] */ -35,7,78,120,-72,29,16,70,42,62,25,-103,-53,127,18,44,-83,-111,92,7,15,71,-69,-96,-15,-42,25,-14,-122,44,14,-17,-41,-9,-101,-59,17,40,-109,-17,-15,-71,-32,34,92,-80,-42,34, 
  /* [3][0][][] */ -23,72,-70,-14,33,-72,12,62,110,-79,-47,20,6,-33,4,57,28,22,-27,-23,-8,9,-91,34,-31,-39,42,-19,80,-37,40,-56,28,-29,-39,-49,-127,-6,-88,33,-20,-61,32,0,-43,8,-20,-34, 
  /* [4][0][][] */ 39,-34,22,-28,-77,66,37,76,-127,-60,62,35,61,-47,-63,-54,83,62,84,-39,17,-78,-11,34,-15,19,-57,-114,-61,-42,92,22,78,11,127,83,80,84,39,42,26,21,-41,-13,102,70,100,-51, 
  /* [5][0][][] */ 30,75,24,89,17,23,-58,-82,-100,20,-16,11,17,68,46,-51,57,104,-11,22,-25,-56,-18,-66,-88,-65,-50,61,8,27,-18,44,-10,-86,74,17,-26,127,-35,-93,-9,-41,-5,-27,3,-7,-23,90, 
  /* [6][0][][] */ 126,62,-1,127,-75,19,15,49,22,-73,52,87,89,-46,-38,-65,68,27,-82,28,71,-37,-26,6,-9,60,-34,-53,18,-50,53,56,25,-44,-8,78,91,-92,-6,5,-100,77,-116,45,49,90,85,-52, 
  /* [7][0][][] */ 30,8,127,46,-27,54,-93,0,-29,99,-19,-10,44,45,17,-12,-47,-19,-60,6,-13,22,2,-29,-18,33,42,-5,-2,-7,9,-2,-74,-20,51,24,77,-7,45,-15,-30,-19,-42,-57,-6,-34,7,22, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.007326934952288866, 0.0025624821428209543, 0.0021282911766320467, 0.0028521358035504818, 0.0026519764214754105, 0.0030708061531186104, 0.0025010446552187204, 0.0040344875305891037, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 17864, -21289, -965, 4195, -2460, 10720, 6095, -2133, -19374, 2795, -871, -3130, -6646, -15999, 1924, 1098, -9860, 25676, -1749, -11139, 15654, 289, -4466, 924, -3109, -4131, -7095, -3665, -2416, 3042, -203, 23325, 15641, 1331, 8356, 17438, -755, 23746, 1836, -47, -2836, -9527, -3658, 1488, 3987, 23540, 16754, -2431, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 9.5302624686155468e-05, 7.4323143053334206e-05, 0.00094478711253032088, 0.0001648808247409761, 0.00016513027367182076, 0.00010078205377794802, 0.00010407067748019472, 0.00034723663702607155, 8.1363861681893468e-05, 0.00031315398518927395, 0.00021961811580695212, 9.0651541540864855e-05, 0.00011284375796094537, 6.9070469180587679e-05, 0.00012633824371732771, 6.4590160036459565e-05, 6.6459586378186941e-05, 7.670663035241887e-05, 0.0004084315150976181, 7.0925678301136941e-05, 8.4179438999854028e-05, 0.00033654517028480768, 0.00013395081623457372, 0.00015366637671831995, 0.00015725442790426314, 0.00016762377345003188, 0.00014791055582463741, 0.00020792947907466441, 0.00018738163635134697, 0.00011601628648350015, 9.7846495918929577e-05, 7.6041302236262709e-05, 0.00010947570262942463, 0.00016788629000075161, 9.1924724983982742e-05, 0.00011033194459741935, 0.0002749226987361908, 0.00010337688581785187, 8.7944645201787353e-05, 0.00028026284417137504, 0.00013997445057611912, 0.00012806429003830999, 0.00019819600856862962, 0.00011981647548964247, 0.0001554331392981112, 6.23470259597525e-05, 8.0098332546185702e-05, 0.00016832645633257926, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -56,22,52,17,127,-81,13,7,37,28,57,-31,-3,-13,-91,38,78,-68,-27,36,-25,10,-34,4,-4,14,40,-40,-15,127,46,-92,-43,114,113,-27,12,-61,-127,-19,20,-3,4,-63,-12,-29,-127,1, -104,47,0,49,-7,-95,116,-14,95,6,12,127,47,111,-26,62,109,-89,4,63,-14,-34,117,-119,0,61,-77,23,-18,-114,127,-108,-127,-84,25,-7,-66,-23,-125,26,-55,-18,31,-127,16,-104,3,49, -35,12,3,8,54,-75,10,-9,46,21,-26,-68,-20,-19,-80,56,60,-20,-18,31,-8,-18,-40,4,38,18,34,-88,-25,60,-56,-127,9,5,103,-21,16,-35,-81,10,29,8,17,-63,-22,-40,-123,-14, 
  /* [0][1][][] */ -116,124,-31,-72,6,-118,10,-9,72,14,-14,46,88,127,-33,36,127,-127,3,79,-23,-64,-80,-26,-127,-4,-17,19,-1,10,60,-98,-62,127,-115,-60,44,-93,61,63,-88,30,-51,75,-19,-90,1,-44, 47,113,127,127,-27,72,-127,127,127,-127,-127,99,127,120,127,-122,-39,-63,127,21,-127,127,127,-1,92,127,79,127,127,-91,93,51,-63,-112,-16,-127,127,127,102,45,-48,127,-11,83,127,34,-11,-127, -107,63,-41,-61,-49,-127,6,-25,17,2,92,58,34,122,-22,127,118,-61,-9,76,23,-105,-91,-50,46,-12,-6,27,1,18,57,-70,-9,-27,-127,-65,32,-96,75,-127,-89,38,127,62,-30,-127,-20,101, 
  /* [0][2][][] */ -36,39,-8,-12,24,-23,24,4,77,25,110,51,-1,-3,-6,105,46,-52,-48,-11,-33,12,-39,46,-3,-1,-19,-8,10,81,-10,-8,-15,34,-97,9,-50,-77,52,-31,95,-5,-3,-4,-19,38,-11,-45, -127,127,-3,12,-62,-122,94,-69,85,20,55,-42,-25,8,-43,86,63,24,0,127,-82,14,82,127,20,-125,127,11,18,-62,-55,-108,-3,-68,-98,-118,-81,-87,26,32,127,38,-30,26,-12,-7,-120,-21, 20,-10,16,0,4,-33,19,15,61,21,98,22,15,15,-11,42,42,-21,-58,13,-15,-14,-45,50,26,-1,-19,-47,2,-9,-34,13,-2,8,-51,14,-41,-56,56,7,57,1,31,-16,-19,-30,18,28, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0055361366830766201, 0.004317436832934618, 0.054882753640413284, 0.0095779392868280411, 0.0095924297347664833, 0.0058544371277093887, 0.0060454732738435268, 0.020171001553535461, 0.0047264327295124531, 0.018191138282418251, 0.012757632881402969, 0.0052659548819065094, 0.0065551022998988628, 0.0040123085491359234, 0.007338997907936573, 0.0037520474288612604, 0.0038606422021985054, 0.0044558937661349773, 0.023725816980004311, 0.0041200779378414154, 0.0048899897374212742, 0.019549934193491936, 0.0077812131494283676, 0.0089264912530779839, 0.0091349212452769279, 0.0097372774034738541, 0.0085921352729201317, 0.01207863911986351, 0.010885013267397881, 0.0067393947392702103, 0.0056839101016521454, 0.0044172448106110096, 0.0063594519160687923, 0.0097525268793106079, 0.0053399140015244484, 0.0064091910608112812, 0.015970280393958092, 0.0060051712207496166, 0.0051087108440697193, 0.016280489042401314, 0.0081311259418725967, 0.0074392640963196754, 0.011513221077620983, 0.0069601479917764664, 0.0090291230008006096, 0.003621743293479085, 0.004652918316423893, 0.0097780963405966759, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 1399, 5100, -10111, 5862, 3197, 7094, 2975, 15683, 14673, 4742, -3642, -642, 1300, 5248, 2757, -370, 194, 5342, 24847, 582, 4255, 16261, 3754, 6247, 14216, 8741, 1853, 8786, 2478, 4862, -2723, 9298, 2154, 10299, 11546, 8005, 6633031, 20438, 5455, 17998, 3162, 1735, 5133, 1972, 4823, 1710, 2427, 5693, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00019596955098677427, 0.00015350560715887696, 8.0984929809346795e-05, 0.00011389497376512736, 0.00016400047752540559, 7.9435856605414301e-05, 0.00015420261479448527, 5.6056360335787758e-05, 7.0452661020681262e-05, 0.00014255009591579437, 0.00010577654029475525, 8.8582361058797687e-05, 0.00014363003720063716, 0.00011904288112418726, 0.00017068248416762799, 0.00010724792082328349, 0.00016932767175603658, 0.00014670017117168754, 3.8979003875283524e-05, 0.00013711054634768516, 0.0001055515167536214, 5.1315535529283807e-05, 0.00013270368799567223, 0.00010263601143378764, 5.9010057157138363e-05, 9.7672309493646026e-05, 0.00011120956332888454, 9.5204268291126937e-05, 6.9332330895122141e-05, 0.00014952891797292978, 0.00016433501150459051, 8.3575556345749646e-05, 0.00020767409296240658, 7.5372838182374835e-05, 5.9105026593897492e-05, 9.1629786766134202e-05, 2.4860267444637429e-07, 4.9021280574379489e-05, 0.00010323758033337072, 5.4506319429492578e-05, 8.2003432908095419e-05, 0.00014163546438794583, 0.00011852542229462415, 9.9850774859078228e-05, 0.00012076442362740636, 0.00014080609253142029, 0.00015376665396615863, 7.6942364103160799e-05, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -82,-127,-27,19,-28,-10,42,-49, 
  /* [1][0][][] */ -8,127,48,-94,-3,-103,-60,103, 
  /* [2][0][][] */ -127,-49,42,13,57,6,32,-16, 
  /* [3][0][][] */ 11,-27,-127,-49,23,-49,-22,42, 
  /* [4][0][][] */ -27,-110,83,-5,127,-73,49,29, 
  /* [5][0][][] */ -33,67,76,-120,123,49,-66,127, 
  /* [6][0][][] */ -127,86,44,69,-58,-4,43,-110, 
  /* [7][0][][] */ 56,-10,67,34,48,-127,-5,123, 
  /* [8][0][][] */ 12,82,-12,-21,26,88,127,-62, 
  /* [9][0][][] */ 68,114,19,-82,-67,-51,-67,127, 
  /* [10][0][][] */ 40,-15,23,-6,-29,41,-127,-84, 
  /* [11][0][][] */ -88,7,-111,-90,127,25,40,70, 
  /* [12][0][][] */ 81,35,-34,-8,127,108,15,13, 
  /* [13][0][][] */ -127,-109,-1,58,-87,38,59,14, 
  /* [14][0][][] */ -11,104,-116,109,-63,127,-26,20, 
  /* [15][0][][] */ 1,-63,-18,-69,127,48,-32,40, 
  /* [16][0][][] */ 84,-77,18,55,42,-21,40,-127, 
  /* [17][0][][] */ -67,-66,-127,113,-7,81,83,-118, 
  /* [18][0][][] */ 92,8,127,26,-51,-114,-72,-36, 
  /* [19][0][][] */ -39,127,43,26,99,-113,-74,-42, 
  /* [20][0][][] */ -86,-26,-127,-53,43,4,-13,3, 
  /* [21][0][][] */ -84,17,25,87,-62,-127,118,-35, 
  /* [22][0][][] */ 54,-7,-127,-70,-41,-11,0,35, 
  /* [23][0][][] */ -14,37,127,-14,-100,47,-10,-92, 
  /* [24][0][][] */ -82,86,64,90,127,77,-5,-40, 
  /* [25][0][][] */ -43,-127,-86,42,-57,41,53,-18, 
  /* [26][0][][] */ 107,127,-111,-66,-121,-40,-46,46, 
  /* [27][0][][] */ 62,53,-68,14,-127,26,-30,-15, 
  /* [28][0][][] */ -33,44,15,-90,91,78,-127,-89, 
  /* [29][0][][] */ 62,7,-22,-93,-127,30,8,-45, 
  /* [30][0][][] */ -83,6,32,127,50,27,-36,-28, 
  /* [31][0][][] */ 15,-122,-5,-91,-127,51,-61,-123, 
  /* [32][0][][] */ -127,3,23,-13,10,-30,6,19, 
  /* [33][0][][] */ 62,-75,-127,-110,14,24,-68,-3, 
  /* [34][0][][] */ 77,116,127,13,-104,-62,75,-76, 
  /* [35][0][][] */ 111,38,26,21,-122,-50,-127,-51, 
  /* [36][0][][] */ -127,-18,-59,22,-17,27,-47,-73, 
  /* [37][0][][] */ 127,114,-10,3,66,64,-100,17, 
  /* [38][0][][] */ -55,80,118,127,-46,88,37,-59, 
  /* [39][0][][] */ 44,72,127,-22,97,-61,-39,7, 
  /* [40][0][][] */ 80,46,50,10,-115,-127,38,-92, 
  /* [41][0][][] */ 35,-66,23,127,-21,84,3,99, 
  /* [42][0][][] */ -36,-127,76,-71,116,-13,77,45, 
  /* [43][0][][] */ 13,-13,-127,-21,127,46,-43,127, 
  /* [44][0][][] */ 115,-14,127,10,-7,41,-44,1, 
  /* [45][0][][] */ -59,-5,46,-60,-96,-113,-44,127, 
  /* [46][0][][] */ -56,68,75,29,6,-12,32,-127, 
  /* [47][0][][] */ 38,-15,36,127,0,-88,51,50, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0050942143425345421, 0.00399036705493927, 0.0021051974035799503, 0.0029606916941702366, 0.0042631807737052441, 0.0020649293437600136, 0.0040084859356284142, 0.0014571810606867075, 0.001831411849707365, 0.0037055795546621084, 0.0027496535331010818, 0.0023026920389384031, 0.0037336524110287428, 0.0030945111066102982, 0.0044368789531290531, 0.0027879020199179649, 0.0044016605243086815, 0.003813460236415267, 0.0010132563766092062, 0.0035641789436340332, 0.0027438041288405657, 0.0013339436845853925, 0.0034496230073273182, 0.0026680156588554382, 0.0015339622041210532, 0.0025389846414327621, 0.002890884643420577, 0.0024748281575739384, 0.0018022889271378517, 0.0038869935087859631, 0.0042718769982457161, 0.0021725406404584646, 0.0053984732367098331, 0.001959311543032527, 0.0015364309074357152, 0.0023819096386432648, 6.4624086917319801e-06, 0.0012743046972900629, 0.0026836534962058067, 0.0014168878551572561, 0.0021316732745617628, 0.0036818038206547499, 0.0030810597818344831, 0.0025956137105822563, 0.0031392625533044338, 0.0036602441687136889, 0.0039971531368792057, 0.0020001111552119255, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 6918, -4117, 22354, -8108, -17903, -20991, -7314, -1827, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 6.9909874582663178e-05, 0.0001134651101892814, 9.5365459856111556e-05, 8.8890432380139828e-05, 7.8625031164847314e-05, 7.9615550930611789e-05, 0.00013972449232824147, 0.00011841337982332334, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -14,-39,57,-58,59,94,68,99,127,-45,-24,60,-45,-32,15,-15,55,44,17,-55,-28,24,-91,-26,26,-11,24,-79,-40,36,38,31,35,48,59,13,126,-60,-83,-6,-66,-79,-39,3,-76,-81,-124,69, 
  /* [1][0][][] */ -16,3,-34,51,0,14,-32,-17,-46,27,11,91,-31,5,-29,127,42,58,6,-36,-39,-27,-68,33,11,-15,-20,-77,46,-1,-57,-61,67,-19,-34,-61,36,34,50,-49,-1,60,42,-31,4,-28,-42,-17, 
  /* [2][0][][] */ 2,-87,-21,-17,-37,11,3,1,109,22,-1,-17,-24,-80,31,5,-4,-64,-30,-10,-109,52,1,19,12,43,-46,-38,-24,-51,34,-52,-116,21,-40,53,-68,65,-29,-30,127,-28,-14,28,20,34,-63,-37, 
  /* [3][0][][] */ -22,-108,89,51,30,-92,-19,-18,-119,127,51,-39,45,9,-12,18,58,33,-23,38,70,74,25,-44,13,70,63,25,-24,-62,10,9,-18,10,44,8,-9,-82,-44,32,-25,-18,19,-57,-72,27,-8,24, 
  /* [4][0][][] */ -4,62,-22,69,23,-2,16,-1,-47,72,49,71,12,25,62,12,0,-109,-1,-16,90,-9,-103,62,80,-15,27,34,44,21,-7,-61,-61,127,12,19,54,-19,28,26,-19,50,5,-19,-3,-48,-25,16, 
  /* [5][0][][] */ -21,15,-22,-63,-122,30,124,30,24,54,-22,-34,-109,-5,65,-43,-94,40,-53,-84,6,108,6,50,107,38,6,25,-23,-9,127,-63,-19,121,71,92,-34,64,105,52,-20,-34,-21,53,-56,61,38,40, 
  /* [6][0][][] */ -5,-27,-8,28,-44,-44,9,-1,19,-6,34,4,-50,-24,26,49,10,-50,0,-60,64,-29,1,-31,6,-8,2,30,40,5,7,127,46,-10,-10,19,8,-12,12,7,-5,28,-31,-45,1,-28,-26,38, 
  /* [7][0][][] */ -30,-18,-40,-3,0,-24,7,9,42,7,18,-2,-10,12,0,1,35,-5,-1,-6,-58,6,13,-28,-5,-10,-57,-13,-13,-14,15,33,23,-14,32,4,-18,127,-13,-43,-45,-6,-51,-37,19,61,-70,-8, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0037510953843593597, 0.0060881017707288265, 0.0051169442012906075, 0.0047695189714431763, 0.0042187171056866646, 0.0042718644253909588, 0.0074970792047679424, 0.0063536069355905056, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -617, 25674, 23797, -1455, -1783, -9389, 23778, 16199, -11042, -737, -1474, 23336, 17428, -12342, -13536, -4420, -1458, 27730, -1795, -1973, 50386, 12573, -11200, -7035, 15056, 14273, -2471, -385, -5712, -350, 29360, -4387, -7341, 11596, 13061, 11324, -5878, 45723, -767, -1530, 27114, 899, -1874, 19967, -386, -1701, -5920, 16640, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00022588703723158687, 0.000115741859190166, 0.00010527961421757936, 0.00012586475349962711, 5.7471810578135774e-05, 0.00011803270899690688, 9.9661454441957176e-05, 8.9819128334056586e-05, 0.00015624531079083681, 6.5743486629799008e-05, 0.00018776656361296773, 8.1102953117806464e-05, 9.8873555543832481e-05, 0.00021382766135502607, 7.3158356826752424e-05, 9.1858302766922861e-05, 0.00012130921095376834, 0.00016880946350283921, 0.00035617244429886341, 8.697745215613395e-05, 4.7629204345867038e-05, 0.0001058870620909147, 8.4975879872217774e-05, 0.00011476559302536771, 0.0001193694697576575, 8.3511877164710313e-05, 0.00015260910731740296, 8.4700688603334129e-05, 0.00012288404104765505, 0.0002748196420725435, 0.00014568775077350438, 8.7301479652523994e-05, 6.9576548412442207e-05, 0.0001286253536818549, 8.3054655988235027e-05, 0.00010048622789327055, 8.672310650581494e-05, 8.1156758824363351e-05, 9.2656584456562996e-05, 7.1652320912107825e-05, 0.00015612186689395458, 0.00027346576098352671, 6.6191714722663164e-05, 8.2971550000365824e-05, 0.00018737665959633887, 0.00014754812582395971, 0.00017958451644517481, 9.4944181910250336e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 55,-43,-23,37,110,28,-68,-68,-17,75,78,-93,-80,53,111,33,70,-94,38,114,-127,-112,27,73,-54,-25,94,93,81,37,-58,66,72,-50,-117,-49,81,-50,61,33,-99,-2,67,-70,54,127,78,-77, 78,-65,-43,69,118,55,-65,-113,14,63,83,-97,-94,79,127,63,55,-98,40,127,-85,-127,86,85,-47,-97,127,110,127,122,-68,88,61,-83,-127,-70,92,-79,50,49,-109,13,62,-127,79,120,84,-89, 50,-39,-21,18,37,-10,-46,-24,32,15,17,-39,-27,32,65,24,40,-7,0,25,-2,-75,38,38,-25,-37,64,54,72,42,-36,29,29,-53,-74,-50,27,-24,-3,45,-34,-37,-1,-73,9,19,2,-66, 
  /* [0][1][][] */ 26,-74,-65,60,126,75,-112,-105,70,104,87,-127,-86,91,113,79,127,-127,57,114,-114,-114,69,127,-127,-66,89,125,86,67,-89,123,127,-95,-118,-127,111,-87,114,92,-92,48,127,-125,122,92,24,-127, 26,-127,-127,127,127,127,-127,-127,117,127,127,-127,-127,127,114,127,98,-126,64,123,-126,-93,127,122,-120,-127,102,127,97,127,-127,127,114,-127,-88,-67,127,-127,127,112,-127,127,114,-109,127,104,29,-110, -13,-77,-94,66,80,14,-60,-30,73,16,52,-87,-50,40,37,71,47,-30,25,67,-25,-72,63,87,-87,-23,7,37,70,38,-51,40,78,-97,-58,-53,69,-50,41,80,-19,7,47,-57,76,-18,0,-107, 
  /* [0][2][][] */ -63,-48,-48,45,6,43,-72,-34,-127,42,25,-96,-60,12,78,43,55,-23,-82,55,-21,-37,75,44,-58,-67,48,58,48,-16,-42,47,43,-64,-9,-24,18,-64,29,115,-26,45,84,-83,43,48,-103,-44, -127,-66,-66,44,33,59,-95,-9,-102,67,61,-92,-83,30,84,79,67,-20,-127,84,-39,-49,102,44,-95,-43,52,55,24,9,-59,60,78,-113,-11,-40,33,-57,28,127,-47,68,115,-106,69,1,-127,-112, -63,-31,-57,33,16,4,-14,10,-117,21,17,-65,-17,-7,42,40,4,1,-62,65,-43,23,39,13,-58,15,11,32,41,-36,-24,16,29,-52,13,-29,26,-35,-17,91,-8,33,33,-21,57,-15,-69,-67, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0098205432295799255, 0.00503193074837327, 0.0045770797878503799, 0.005472028162330389, 0.0024986134376376867, 0.0051315263845026493, 0.0043328278698027134, 0.0039049279876053333, 0.0067928368225693703, 0.0028582282830029726, 0.0081632379442453384, 0.0035259884316474199, 0.0042985733598470688, 0.0092962561175227165, 0.0031805934850126505, 0.0039935819804668427, 0.005273974034935236, 0.0073390696197748184, 0.015484761446714401, 0.0037813850212842226, 0.0020707016810774803, 0.0046034888364374638, 0.0036943657323718071, 0.0049894871190190315, 0.0051896427758038044, 0.0036307172849774361, 0.0066347513347864151, 0.0036824014969170094, 0.0053424402140080929, 0.01194791030138731, 0.0063338424079120159, 0.0037954722065478563, 0.003024872625246644, 0.0055920467711985111, 0.0036108393687754869, 0.0043686851859092712, 0.0037703269626945257, 0.0035283276811242104, 0.0040282877162098885, 0.0031151177827268839, 0.0067874705418944359, 0.011889049783349037, 0.0028777152765542269, 0.0036072265356779099, 0.0081462869420647621, 0.0064147226512432098, 0.0078075197525322437, 0.0041277422569692135, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -3417, 9555, 6502, -1450, 49, 9710, 6045, 2667, 22258, 2492, -4102, 1826, 3758, 1974, -410, 1670, -2345, 9754, -4329, -1369, 1365, 1397, 388, -781, 374, 3012, -2447, -1289, -1071, -3994, 15902, 3897, 537, 1274, 186, 1754, 2485, 13492, 2056, 856, 14429, -3391, 1100, 1521, -2492, -2907, 13894, 5248, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00015302746032830328, 9.2563474026974291e-05, 0.00011992293002549559, 0.00017247586220037192, 0.00025851800455711782, 8.5172163380775601e-05, 0.00015149774844758213, 0.00015213356527965516, 4.8983743909047917e-05, 0.00022212025942280889, 0.00012310626334510744, 0.00024657210451550782, 0.00015835723024792969, 0.00019464864453766495, 0.00024439801927655935, 0.00014636159176006913, 0.00018071130034513772, 9.9016251624561846e-05, 9.6205279987771064e-05, 0.0002613080432638526, 0.00023905142734292895, 0.0001649780897423625, 0.00023681526363361627, 0.00016534085443709046, 0.0002419678057776764, 0.00016013176355045289, 0.0002100880810758099, 0.0001905029930640012, 0.00017774177831597626, 0.00012068022624589503, 6.9980087573640049e-05, 0.00017039066005963832, 0.00024264089006464928, 0.00022291849018074572, 0.00021560100140050054, 0.00020370091078802943, 0.00013751129154115915, 7.0842928835190833e-05, 0.00021146396466065198, 0.00016709779447410256, 7.2516682848799974e-05, 8.0790719948709011e-05, 0.00021547228971030563, 0.00023651814262848347, 0.00021660373022314161, 0.00015588017413392663, 7.256723620230332e-05, 0.0001136645587394014, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 37,28,-73,21,-44,63,-127,34, 
  /* [1][0][][] */ 9,-69,-127,-3,-3,-30,110,-120, 
  /* [2][0][][] */ -127,-51,-69,-56,-50,44,-121,9, 
  /* [3][0][][] */ -70,-31,24,-24,-24,-127,-125,-11, 
  /* [4][0][][] */ -44,-127,-52,24,67,28,-38,-51, 
  /* [5][0][][] */ 72,-15,77,64,-127,72,-83,-98, 
  /* [6][0][][] */ 45,-127,-52,-24,-5,58,-37,-89, 
  /* [7][0][][] */ -37,-96,-67,-78,73,-127,-13,44, 
  /* [8][0][][] */ 46,45,52,57,15,-60,6,127, 
  /* [9][0][][] */ -29,-53,-53,2,51,-11,127,-8, 
  /* [10][0][][] */ -20,9,-114,20,18,14,121,-127, 
  /* [11][0][][] */ 6,-37,-35,9,-127,18,7,43, 
  /* [12][0][][] */ 64,66,-34,30,-63,127,60,-1, 
  /* [13][0][][] */ -46,4,26,-27,50,-127,-11,72, 
  /* [14][0][][] */ -108,-41,3,29,9,79,-116,-127, 
  /* [15][0][][] */ 65,71,55,14,-127,32,124,-52, 
  /* [16][0][][] */ 9,-57,13,67,-1,-82,10,-127, 
  /* [17][0][][] */ -82,127,20,-19,-60,-42,-77,-74, 
  /* [18][0][][] */ 123,121,-72,-113,116,99,-127,-93, 
  /* [19][0][][] */ -33,104,-8,6,-127,19,-74,-120, 
  /* [20][0][][] */ -127,-6,5,17,17,13,116,46, 
  /* [21][0][][] */ -41,8,56,14,-94,-110,-127,34, 
  /* [22][0][][] */ -13,-39,-46,1,-127,3,7,58, 
  /* [23][0][][] */ 66,0,-11,-24,127,70,-83,94, 
  /* [24][0][][] */ 127,7,-34,39,-87,-9,18,-12, 
  /* [25][0][][] */ 16,-45,70,74,-33,-127,28,104, 
  /* [26][0][][] */ 13,127,-1,60,67,-11,13,-11, 
  /* [27][0][][] */ -127,99,68,-15,111,-60,16,88, 
  /* [28][0][][] */ -84,-86,-57,-50,83,-127,9,-4, 
  /* [29][0][][] */ -61,-26,49,27,127,-93,-103,91, 
  /* [30][0][][] */ 127,43,-101,-103,-63,-91,-68,-70, 
  /* [31][0][][] */ 25,-5,46,63,-127,2,37,3, 
  /* [32][0][][] */ 127,7,54,47,-38,-72,96,74, 
  /* [33][0][][] */ 127,27,-31,18,-118,-67,17,44, 
  /* [34][0][][] */ 25,-8,-22,11,-39,127,12,-61, 
  /* [35][0][][] */ 127,30,-7,-26,43,-90,41,104, 
  /* [36][0][][] */ -23,-48,75,-95,-33,-19,78,-127, 
  /* [37][0][][] */ 68,-59,53,50,117,-1,30,-127, 
  /* [38][0][][] */ 70,127,13,-34,-22,19,22,84, 
  /* [39][0][][] */ 14,-1,-80,69,-15,-48,-77,127, 
  /* [40][0][][] */ -21,-35,4,-38,25,-127,18,52, 
  /* [41][0][][] */ -23,57,-114,-69,103,127,69,-112, 
  /* [42][0][][] */ 30,-39,-26,20,78,127,22,40, 
  /* [43][0][][] */ -4,31,-16,22,-127,-73,38,-55, 
  /* [44][0][][] */ -127,-51,0,-39,36,40,-89,-65, 
  /* [45][0][][] */ -79,61,-62,25,29,-2,-60,127, 
  /* [46][0][][] */ -5,42,127,15,-72,-42,-32,24, 
  /* [47][0][][] */ -127,-101,-55,-70,124,125,-30,83, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0022149549331516027, 0.0013397851726040244, 0.0017357922624796629, 0.0024964555632323027, 0.0037418496794998646, 0.0012328015873208642, 0.0021928134374320507, 0.0022020165342837572, 0.0007090020808391273, 0.0032150200568139553, 0.0017818685155361891, 0.0035689417272806168, 0.0022920991759747267, 0.0028173895552754402, 0.003537473501637578, 0.0021184715442359447, 0.0026156571693718433, 0.0014331841375678778, 0.0013924975646659732, 0.00378223299048841, 0.0034600857179611921, 0.0023879311047494411, 0.0034277189988642931, 0.0023931819014251232, 0.0035022981464862823, 0.0023177843540906906, 0.0030408636666834354, 0.0027573844417929649, 0.0025726757012307644, 0.0017467535799369216, 0.0010129080619663, 0.0024662739597260952, 0.0035120404791086912, 0.0032265738118439913, 0.0031206589192152023, 0.0029484143014997244, 0.0019903702195733786, 0.0010253969812765718, 0.0030607783701270819, 0.0024186121299862862, 0.0010496232425794005, 0.0011693836422637105, 0.0031187958084046841, 0.0034234183840453625, 0.0031351726502180099, 0.0022562458179891109, 0.0010503550292924047, 0.0016452071722596884, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 10560, 15108, 4945, 3511, 710, -13420, 7411, -7468, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00014593699597753584, 0.00014531709894072264, 0.00013520826178137213, 0.00021158260642550886, 0.00011701579933287576, 0.00013915389718022197, 6.9966808950994164e-05, 0.00011857732170028612, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 30,-43,102,64,37,-44,18,7,-12,55,-41,11,-40,-84,34,4,-119,64,-33,59,-46,79,11,-33,-10,-50,59,-36,-20,34,-17,102,-57,-2,-38,-79,-66,-37,-31,-24,-20,58,-127,13,49,19,22,56, 
  /* [1][0][][] */ -52,-32,66,-8,-29,29,-44,-33,54,-11,0,-27,-21,13,7,16,8,21,3,-2,-60,-36,-65,-29,29,-32,-31,-31,27,-75,-10,-127,0,-61,-62,-69,-40,-90,-23,29,49,-22,87,-107,-46,-19,-32,-7, 
  /* [2][0][][] */ -64,97,-4,28,18,3,7,-37,68,-41,65,80,98,14,31,-54,94,-1,2,35,-9,24,24,124,-127,-49,3,-21,-2,97,0,-94,-30,2,13,-71,-15,9,-34,-28,74,-89,29,-14,18,-120,2,-10, 
  /* [3][0][][] */ 58,-16,-56,23,92,-94,-3,-127,-46,-8,-69,-95,-13,120,-17,16,-51,-27,-65,-59,35,90,0,-51,105,46,45,-65,37,-88,70,-65,64,68,101,-65,-43,26,-23,28,13,81,-72,31,-7,29,-3,31, 
  /* [4][0][][] */ -42,26,-34,66,78,-21,29,-40,-26,-3,-49,38,-50,-9,5,-52,19,67,-24,-30,-39,27,-63,-63,25,-2,28,-36,23,-35,-42,58,-8,66,-67,-67,-59,-68,-43,5,71,-52,127,22,6,87,-43,-46, 
  /* [5][0][][] */ 50,-1,83,-4,-3,32,62,29,127,0,75,-8,70,50,35,-63,-12,25,33,-38,-51,-69,8,41,29,-6,35,43,-40,-40,6,-23,-16,52,-15,56,50,4,-28,-35,-12,64,27,36,-19,0,69,7, 
  /* [6][0][][] */ -13,-62,-27,11,44,-9,-3,11,-62,-18,90,52,105,58,-40,47,98,-127,-16,-10,-9,-29,-101,30,-84,63,-47,-13,-18,-42,85,-55,87,23,-80,-18,-50,16,55,-6,61,-64,-13,-74,-112,38,-50,26, 
  /* [7][0][][] */ -9,-14,-64,-37,32,94,-7,0,-11,-48,-127,-100,48,50,-58,-47,-41,27,109,11,-13,-65,58,-14,104,-35,-71,87,-30,-2,-11,-78,-51,76,63,125,93,-48,-13,-41,-26,-11,38,-20,-7,-27,8,-48, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.00620232243090868, 0.00617597671225667, 0.0057463510893285275, 0.0089922603219747543, 0.004973171278834343, 0.0059140403755009174, 0.0029735893476754427, 0.00503953592851758, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -1197, -79, -618, 193, 477, 9953, -941, -3834, -6268, -530, -8087, 930, -3823, -5471, 3524, -1321, -9977, 18082, -2869, 777, -593, 257, -1329, 110, 18629, -1216, -846, -1387, 926, 2360, -1951, -7780, -647, 11923, -1792, 6218, -773, -5185, -1855, -1009, -4176, -1984, 4748, 5439, 2257, 7270, 203, -3775, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00025974700110964477, 0.00014259912131819874, 0.00047359312884509563, 0.00016015562869142741, 0.00016355594561900944, 0.0003044693439733237, 0.00031429927912540734, 0.00018599393661133945, 0.00024601598852314055, 0.00015563312626909465, 0.00034723521093837917, 0.0001812802511267364, 0.00021476791880559176, 0.0001348416117252782, 9.7586664196569473e-05, 0.0003850600915029645, 0.00019129173597320914, 8.5104089521337301e-05, 0.00021497119450941682, 0.00039069587364792824, 0.00024450084310956299, 0.00032420855131931603, 0.0002092192298732698, 0.00064998859306797385, 0.00020324686192907393, 0.00027482386212795973, 0.00016534897440578789, 0.00020869405125267804, 0.00024038845731411129, 0.00021782028488814831, 0.00038281202432699502, 0.00053318566642701626, 0.00042002956615760922, 0.00011297934543108568, 0.00042024857248179615, 0.0001935282489284873, 0.00016916652384679765, 0.00010061705688713118, 0.0003893817774951458, 0.00064009457128122449, 0.00019958887423854321, 0.00065488426480442286, 0.00048395519843325019, 0.00015417813847307116, 0.00024393186322413385, 0.00012599785986822098, 0.00018783987616188824, 0.00021984941849950701, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -6,-28,36,-29,127,-10,-6,-12,-35,41,1,3,68,25,127,-28,40,-35,-21,-11,-25,-23,-66,28,-127,63,24,-41,-19,27,-13,-4,-37,5,21,9,84,54,36,-7,69,18,-18,-3,-105,-23,-43,-23, -7,-80,-73,-25,-54,4,39,17,28,-6,73,127,-8,67,-94,127,24,-56,43,-54,-77,-127,-76,71,-109,-82,12,120,12,29,123,3,-127,-127,-42,41,127,-65,125,6,55,-7,-25,-19,-57,-22,66,11, 8,-14,-9,127,43,18,-65,3,-28,-40,-20,-26,47,-1,-88,-38,45,-1,6,-17,-4,-9,-28,15,-48,-61,-28,39,2,26,-85,-11,20,69,23,23,8,77,-126,2,19,-2,-11,26,-127,-5,-65,53, 
  /* [0][1][][] */ -113,-46,127,-11,-27,-52,80,11,11,84,7,13,46,23,109,32,15,-127,66,40,95,-6,51,-36,-22,-10,46,-49,14,50,41,60,32,-118,8,127,11,37,-41,-117,30,96,-23,-91,20,-80,-67,24, 127,-48,-64,-76,-3,-127,127,127,127,10,127,-51,-127,15,-61,-34,127,-88,127,127,127,74,127,-127,-7,-27,106,-11,127,123,-127,127,23,-113,127,-89,-57,127,-95,127,-127,-127,127,-127,89,-127,127,-109, -7,-95,18,55,-37,-10,-36,13,-23,-127,-31,56,55,5,-90,43,4,-25,18,9,-17,-28,38,-19,-8,13,-127,73,-82,8,89,17,-2,-84,-9,-32,65,33,127,17,21,59,-46,11,48,-19,-63,127, 
  /* [0][2][][] */ 3,127,32,-35,93,12,-25,-14,-31,8,-4,-10,48,18,103,11,-10,-26,-16,-55,-7,15,-4,14,-21,-10,41,-7,-67,-116,-8,-1,-6,30,-12,33,-50,47,18,109,17,28,-5,8,13,11,-14,-25, 6,95,-38,10,36,-39,8,30,45,3,35,-49,27,127,-110,-66,10,-55,86,-86,-55,70,-2,48,83,127,8,127,-85,-127,-9,-4,87,-103,-73,3,-61,-35,-21,-126,52,-14,-55,82,40,33,13,12, 22,116,-7,15,31,4,-45,3,-25,-22,2,-13,36,-1,-95,1,-17,-27,-9,-35,-31,10,-2,3,-46,33,-37,8,32,-86,35,-3,17,78,10,-13,-37,68,19,3,-29,2,-2,-7,8,21,-7,50, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011039247736334801, 0.0060604624450206757, 0.020127708092331886, 0.0068066143430769444, 0.0069511276669800282, 0.012939946725964546, 0.013357719406485558, 0.0079047419130802155, 0.010455679148435593, 0.0066144079901278019, 0.014757496304810047, 0.0077044107019901276, 0.0091276364400982857, 0.0057307686656713486, 0.0041474332101643085, 0.016365053132176399, 0.0081298984587192535, 0.0036169236991554499, 0.0091362753883004189, 0.016604574397206306, 0.010391285642981529, 0.013778863474726677, 0.008891817182302475, 0.027624513953924179, 0.0086379917338490486, 0.011680013500154018, 0.0070273312740027905, 0.0088694971054792404, 0.010216508992016315, 0.0092573622241616249, 0.016269510611891747, 0.022660389542579651, 0.017851255834102631, 0.0048016221262514591, 0.017860563471913338, 0.0082249501720070839, 0.007189576979726553, 0.0042762248776853085, 0.016548724845051765, 0.027204018086194992, 0.0084825269877910614, 0.027832580730319023, 0.020568095147609711, 0.0065525704994797707, 0.010367103852331638, 0.0053549087606370449, 0.0079831946641206741, 0.0093435999006032944, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 7899, 2758, 32975, -2358, -1054, 13941, -1617, 1703, 3909, 86, 8566, 581, 4007, 6907, 4475, 5151, 3536, 4155, -1592, 8274, 2391, 591, 1483, 17978, 25427, 7148, 4313, -2307, -75, 9346, 7227, 18947, 15581, 7433, 7082, -2402, 485, 2905, 12119, 7115, 1493, 22709, 19552, 6099, 12105, 2133, 4868, 1274, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00010066889080917463, 0.0001845147053245455, 3.8662248698528856e-05, 0.00019786191114690155, 0.00027934642275795341, 7.8682656749151647e-05, 0.0001361980102956295, 0.00030365941347554326, 0.00016077351756393909, 0.0001787065266398713, 9.6799558377824724e-05, 0.00027400546241551638, 0.00013790358207188547, 0.00011917071242351085, 0.00012981491454411298, 0.00015079743752721697, 0.00012073836114723235, 0.00012941625027451664, 0.00021616880258079618, 0.00010513995948713273, 0.00014867661229800433, 0.00023512142070103437, 0.00018810466281138361, 5.5643056839471683e-05, 5.9962712839478627e-05, 0.00011607437045313418, 0.00017357624892611057, 0.00018221554637420923, 0.00031169800786301494, 9.2725676950067282e-05, 0.00011688755330396816, 5.31771220266819e-05, 6.1076600104570389e-05, 0.00012154324940638617, 0.00011532750795595348, 0.00010826536163222045, 0.00026694528060033917, 0.00013421635958366096, 7.3114613769575953e-05, 0.00012107345537515357, 0.00013477919856086373, 4.6199791540857404e-05, 6.0873851907672361e-05, 0.00011952473141718656, 7.9943958553485572e-05, 0.00025634258054196835, 0.0001486359687987715, 0.00016854412388056517, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -12,28,0,-127,-88,13,21,97, 
  /* [1][0][][] */ 79,-3,-21,11,-76,28,127,37, 
  /* [2][0][][] */ -15,116,-43,-34,-39,75,-57,-127, 
  /* [3][0][][] */ 51,-74,-97,125,-127,-28,9,-26, 
  /* [4][0][][] */ 41,-70,56,-12,-127,-4,50,19, 
  /* [5][0][][] */ -15,49,-13,-98,-127,0,-36,8, 
  /* [6][0][][] */ 32,-14,29,20,119,-25,-1,-127, 
  /* [7][0][][] */ 22,31,23,127,23,-12,0,13, 
  /* [8][0][][] */ 47,27,41,-30,55,127,29,-39, 
  /* [9][0][][] */ 100,34,-16,15,-76,-79,127,59, 
  /* [10][0][][] */ 5,70,-63,-31,2,127,83,-61, 
  /* [11][0][][] */ -16,-44,-127,94,-59,31,-21,73, 
  /* [12][0][][] */ -83,-74,57,44,24,-127,-30,-6, 
  /* [13][0][][] */ 42,38,35,48,-62,127,17,-41, 
  /* [14][0][][] */ 19,-80,-3,-1,-70,-68,-127,103, 
  /* [15][0][][] */ -90,27,-10,11,91,-12,-127,-36, 
  /* [16][0][][] */ 117,89,-101,-117,53,124,127,38, 
  /* [17][0][][] */ -112,111,-127,47,-15,-36,27,-120, 
  /* [18][0][][] */ 36,-2,-99,127,-8,-39,-31,-63, 
  /* [19][0][][] */ 113,36,4,17,-37,29,127,47, 
  /* [20][0][][] */ 32,-78,-82,127,49,-27,-18,-63, 
  /* [21][0][][] */ 37,47,127,-112,38,-22,28,-120, 
  /* [22][0][][] */ -100,-48,-127,74,-49,31,20,121, 
  /* [23][0][][] */ 61,36,33,26,-127,99,47,-16, 
  /* [24][0][][] */ 5,-7,-127,80,-25,38,45,38, 
  /* [25][0][][] */ 52,-44,-78,127,61,-8,-52,-15, 
  /* [26][0][][] */ -76,23,127,-96,-1,32,51,-5, 
  /* [27][0][][] */ -77,82,127,-8,17,-17,68,23, 
  /* [28][0][][] */ -60,-90,25,-127,-17,14,-5,-8, 
  /* [29][0][][] */ -91,-92,-32,81,6,-127,-28,60, 
  /* [30][0][][] */ -127,33,105,-22,46,35,65,22, 
  /* [31][0][][] */ -54,56,80,-127,-39,23,29,67, 
  /* [32][0][][] */ -93,80,104,-118,27,-2,25,127, 
  /* [33][0][][] */ 2,97,-41,50,13,23,-127,-13, 
  /* [34][0][][] */ 67,22,127,-111,-90,-110,45,-37, 
  /* [35][0][][] */ 101,-2,31,107,102,-53,35,-127, 
  /* [36][0][][] */ 18,48,127,-78,14,-39,43,-89, 
  /* [37][0][][] */ -52,-46,101,56,16,-127,94,-19, 
  /* [38][0][][] */ 94,-2,86,49,-30,-53,127,22, 
  /* [39][0][][] */ 65,-93,-26,8,-127,21,67,85, 
  /* [40][0][][] */ -49,40,-118,118,-52,42,-78,127, 
  /* [41][0][][] */ -116,-16,-64,2,127,16,-99,19, 
  /* [42][0][][] */ -104,61,-26,-18,127,19,-99,-62, 
  /* [43][0][][] */ 127,94,-34,114,-10,-98,35,79, 
  /* [44][0][][] */ 8,24,100,18,25,-127,17,-34, 
  /* [45][0][][] */ -8,-74,127,79,-37,-25,-102,20, 
  /* [46][0][][] */ 40,-124,-127,42,-62,17,-2,-13, 
  /* [47][0][][] */ -123,-24,57,-20,98,43,-127,-43, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0027537401765584946, 0.0050472947768867016, 0.0010575838387012482, 0.0054123997688293457, 0.0076413624919950962, 0.002152319299057126, 0.0037256190553307533, 0.0083064306527376175, 0.0043978681787848473, 0.0048884153366088867, 0.0026478967629373074, 0.0074952635914087296, 0.003772274125367403, 0.0032598469406366348, 0.0035510130692273378, 0.0041249780915677547, 0.0033027292229235172, 0.0035401079803705215, 0.0059131747111678123, 0.0028760437853634357, 0.0040669641457498074, 0.0064316126517951488, 0.0051454957574605942, 0.0015220841160044074, 0.0016402459004893899, 0.0031751482747495174, 0.0047480794601142406, 0.0049844025634229183, 0.0085263215005397797, 0.002536458196118474, 0.0031973924487829208, 0.001454629935324192, 0.001670715631917119, 0.0033247463870793581, 0.003154718317091465, 0.0029615373350679874, 0.0073021361604332924, 0.0036714121233671904, 0.0020000087097287178, 0.0033118955325335264, 0.0036868080496788025, 0.0012637689942494035, 0.0016651696059852839, 0.0032695310655981302, 0.0021868215408176184, 0.007012105081230402, 0.0040658521465957165, 0.004610428586602211, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -10791, 1699, -18389, -986, 2516, -4474, 9547, 599, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00015492372040171176, 0.00010003825445892289, 7.8484117693733424e-05, 5.8681605878518894e-05, 0.00016660623077768832, 9.1058383986819535e-05, 0.00013168173609301448, 0.0001078398126992397, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 49,104,-45,69,-5,-7,-24,9,69,-59,0,-33,6,5,-40,-56,-2,-21,38,28,-65,-39,-39,12,14,14,32,0,21,17,-15,30,-65,8,114,-127,-22,18,-8,114,-27,18,12,-7,-9,37,24,-43, 
  /* [1][0][][] */ 7,-48,38,53,-9,-8,-21,-23,55,-49,90,42,26,10,-52,-95,127,49,18,10,-72,40,44,-16,-55,-105,-27,-54,-9,-62,49,-47,-6,-15,-35,20,8,-13,89,-63,-11,43,-66,34,75,64,10,54, 
  /* [2][0][][] */ 83,-32,-12,-19,108,114,62,76,-24,-10,-8,-29,-1,45,50,26,-27,-34,57,-62,-47,-49,-44,67,-99,-101,127,24,64,-68,-54,20,-123,96,115,16,-7,0,-7,18,33,70,20,-77,-24,26,58,-43, 
  /* [3][0][][] */ 81,-36,20,-18,125,122,29,35,-30,-30,39,49,-127,38,75,23,2,18,75,-112,-84,16,39,93,-4,-23,53,20,48,-62,5,-6,-113,52,-54,-113,26,-46,68,-47,54,-101,-103,-13,-62,26,-10,59, 
  /* [4][0][][] */ 35,40,-24,-32,-8,-14,-19,-16,0,-10,-10,-12,-29,-21,59,53,-34,-16,-34,42,30,-11,-10,11,-45,-38,-11,54,-9,10,-21,26,-32,-9,26,-127,-10,27,15,56,4,-15,-11,-17,37,2,82,-22, 
  /* [5][0][][] */ 80,58,-97,68,10,-1,-9,21,-99,-64,-59,-21,35,23,47,43,54,-71,50,127,-70,-41,-56,57,29,-22,-47,71,27,21,-58,10,2,4,-56,3,-6,22,-25,80,11,77,-1,-42,123,32,21,-66, 
  /* [6][0][][] */ -33,-75,14,-47,-47,-36,-75,-83,-33,-56,-112,42,-60,-54,95,88,-127,2,28,-15,14,59,64,15,-16,-6,-64,83,-83,-36,50,80,15,-63,90,36,26,45,-12,-79,-13,-62,-28,16,-35,-20,-10,66, 
  /* [7][0][][] */ 74,15,-13,44,10,12,11,6,82,-5,-9,-23,62,2,-14,-17,-48,-16,-28,3,-4,-29,-28,-31,75,-127,14,2,2,100,-15,16,-78,13,-60,-44,-12,17,38,29,27,65,-32,-10,-39,30,43,-21, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.006584258284419775, 0.0042516258545219898, 0.0033355748746544123, 0.0024939682334661484, 0.0070807645097374916, 0.0038699812721461058, 0.0055964738130569458, 0.0045831920579075813, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 313, 7324, -2617, 5127, 1108, 882, 8833, 8430, -1250, -10727, -275, 256, 6809, 5680, 23049, 24153, 2236, 525, 1439, 5250, 19081, 453, -1426, -2585, 4630, -688, 4786, 19195, 7100, 13224, -1284, 2352, -3099, -4881, -240, 624, 1522, 235, -1057, 3208, 5913, 6609, -7093, 540, -1475, -84, 10605, -2599, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.0001155035788542591, 0.00012781460827682167, 0.00058576569426804781, 5.6640772527316585e-05, 0.00066719518508762121, 0.00055501493625342846, 0.00013527291594073176, 0.00013792491517961025, 7.1960559580475092e-05, 0.00013016823504585773, 0.00036770070437341928, 0.00032735543209128082, 0.0002647640067152679, 0.00014552203356288373, 5.9019123000325635e-05, 5.6336088164243847e-05, 0.0001020436393446289, 0.00041282264282926917, 6.8559907958842814e-05, 0.00010043507791124284, 5.5388361943187192e-05, 0.0010453963186591864, 0.0012964470079168677, 0.00021551176905632019, 4.7759160224813968e-05, 0.00011246404028497636, 8.7943742983043194e-05, 0.00010348884097766131, 0.00014480888785328716, 0.00012232037261128426, 0.00061819929396733642, 0.00016004680946934968, 8.9708839368540794e-05, 0.00020932822371833026, 6.7953988036606461e-05, 6.3578001572750509e-05, 0.00031618893262930214, 0.00018260633805766702, 0.00010398094309493899, 0.0001983154215849936, 8.9092172856908292e-05, 0.00023149352637119591, 9.4447124865837395e-05, 0.00033142042229883373, 7.5155490776523948e-05, 0.00036719138734042645, 9.3498063506558537e-05, 0.00072532444028183818, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -8,-94,-96,63,-91,5,-108,-86,61,76,99,-42,-4,4,-80,-69,83,-96,26,-61,-19,-111,-47,-64,97,127,9,-115,4,-60,60,98,43,75,70,10,83,80,69,18,-127,-20,38,41,-19,-47,-43,-99, 78,2,37,69,-127,44,-82,11,102,127,117,54,-8,-76,-127,-127,89,-55,86,-51,-101,116,127,77,112,99,47,-94,-86,-63,-89,126,96,127,117,106,-25,70,49,-68,-88,-99,29,-58,-32,30,-65,110, 104,1,68,34,-81,10,-32,-10,18,85,13,-31,-70,-10,-28,-47,49,79,42,11,-51,-17,-81,111,60,32,16,-35,-6,-75,34,51,51,98,15,68,-10,15,66,-4,-58,-10,26,11,-7,-8,-22,4, 
  /* [0][1][][] */ 58,-127,127,88,94,-72,-127,-127,120,84,101,-53,3,0,-106,-95,91,127,39,-112,-57,101,32,-127,127,126,112,-117,-7,-72,-64,114,97,-3,90,44,31,111,112,7,-14,-21,88,101,-113,36,-70,127, 127,0,7,127,127,-127,-104,10,127,117,127,59,-38,-127,-120,-125,127,52,127,-127,-127,-127,-111,89,102,113,127,-127,-127,-71,127,127,127,9,127,127,-13,127,127,-127,5,-127,127,-86,-127,127,-97,-125, 105,-1,-112,54,85,-65,-15,-10,23,53,0,-14,-127,-4,-3,-41,34,-109,47,-50,-41,7,92,114,50,59,-6,-52,-16,-39,-29,36,56,3,3,69,-6,23,84,2,-22,-15,65,-6,-77,2,-39,25, 
  /* [0][2][][] */ 79,-68,14,23,-7,61,-76,-81,53,12,30,64,11,14,-71,-44,17,-49,11,-47,-29,3,22,-94,33,54,76,-14,3,-110,15,29,47,-77,88,9,-127,33,23,8,18,-7,92,-127,-44,-5,-86,1, 38,9,11,66,1,90,-54,0,35,73,40,-127,-14,-99,-52,-56,33,-14,53,-66,-60,-9,-21,64,40,47,78,-52,-88,-127,-20,19,54,-81,83,31,12,45,50,-54,119,-70,115,105,-73,30,-127,27, -48,-13,3,32,-31,34,-12,-13,20,2,-69,51,-67,-10,-16,-11,-2,33,18,29,-36,31,30,48,26,52,24,-16,-11,-60,16,-11,5,-42,36,27,6,-27,37,5,60,-1,27,-9,-6,-34,-42,5, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0049089021049439907, 0.0054321209900081158, 0.024895040318369865, 0.0024072327651083469, 0.028355794027447701, 0.023588133975863457, 0.0057490989565849304, 0.0058618085458874702, 0.0030583236366510391, 0.0055321496911346912, 0.015627279877662659, 0.013912605121731758, 0.011252470314502716, 0.006184686440974474, 0.0025083126965910196, 0.0023942836560308933, 0.0043368544429540634, 0.017544962465763092, 0.0029137958772480488, 0.0042684907093644142, 0.0023540053516626358, 0.044429343193769455, 0.055098995566368103, 0.0091592501848936081, 0.0020297642331570387, 0.0047797216102480888, 0.0037376091349869967, 0.0043982756324112415, 0.0061543774791061878, 0.0051986156031489372, 0.026273470371961594, 0.0068019893951714039, 0.0038126255385577679, 0.0088964495807886124, 0.0028880445752292871, 0.0027020650450140238, 0.013438029214739799, 0.0077607692219316959, 0.004419189877808094, 0.0084284050390124321, 0.0037864174228161573, 0.009838474914431572, 0.0040140026248991489, 0.014085367321968079, 0.003194108372554183, 0.015605633147060871, 0.0039736675098538399, 0.03082628920674324, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 13368, 6178, 7610, 2438, 6325, 5302, -4928, 5090, 2617, -3082, -2900, 5052, -3444, -5742, 9664, 1782, -2271, 2553, -1408, 3980, 640, 7081, 9288, -1693, -372, -5776, 3549, -4014, 4704, 9608, -389, -313, 9271, 13399, 9002, 5265, 6778, -5520, 1744, 5483, -1073, -5118, 4451, 1854, 510, -7557, -13376, 4733, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00030336901545524597, 0.00044287517084740102, 0.00011287900997558609, 0.0006844421150162816, 0.00026410224381834269, 0.00029670179355889559, 0.001163206179626286, 0.00069624907337129116, 0.00096467009279876947, 0.00046526285586878657, 0.00010834720160346478, 0.00036189224920235574, 0.00033034340594895184, 0.00080933654680848122, 0.00044617475941777229, 0.0016174762276932597, 0.00092541641788557172, 0.00028147251578047872, 0.0011297834571450949, 0.0014070640318095684, 0.00062784604961052537, 0.00022316645481623709, 5.9040608903160319e-05, 0.00037072144914418459, 0.0010079494677484035, 0.00065210467437282205, 0.00085643911734223366, 0.00033100592554546893, 0.00078489736188203096, 0.00061010930221527815, 0.0002368087152717635, 0.00042757263872772455, 0.00066251034149900079, 0.00023678748402744532, 0.00038708993815816939, 0.00032542934059165418, 0.00049500394379720092, 0.0010121185332536697, 0.00040490791434422135, 0.00048360350774601102, 0.00099603249691426754, 0.00051076570525765419, 0.00063680304447188973, 0.00021568537340499461, 0.0012095308629795909, 0.00049234897596761584, 0.00059460970805957913, 0.00023232425155583769, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -106,-107,28,-127,-62,-5,-7,4, 
  /* [1][0][][] */ -127,-17,87,-8,-59,23,2,21, 
  /* [2][0][][] */ 31,-24,26,127,25,-23,-16,-7, 
  /* [3][0][][] */ -115,-60,-17,-9,30,127,-42,-38, 
  /* [4][0][][] */ -7,-29,-6,0,-15,11,-127,-71, 
  /* [5][0][][] */ 1,-39,-17,5,-7,13,-127,-71, 
  /* [6][0][][] */ 127,5,13,-9,-62,15,2,-7, 
  /* [7][0][][] */ -127,-25,-22,3,70,17,-1,9, 
  /* [8][0][][] */ 23,46,-11,-6,-26,-127,39,17, 
  /* [9][0][][] */ 80,18,-19,-12,-20,1,-8,127, 
  /* [10][0][][] */ 111,-14,-115,6,-90,-10,35,127, 
  /* [11][0][][] */ -127,112,16,-9,84,-65,22,15, 
  /* [12][0][][] */ 126,-37,-127,18,51,-2,-13,-13, 
  /* [13][0][][] */ 127,12,10,-10,-26,25,13,-15, 
  /* [14][0][][] */ -127,-72,93,-27,53,-18,-46,-126, 
  /* [15][0][][] */ 30,72,13,-1,-11,-127,-17,-11, 
  /* [16][0][][] */ -14,-69,11,5,8,127,10,7, 
  /* [17][0][][] */ 34,-127,-60,9,-42,115,-56,-13, 
  /* [18][0][][] */ 33,-19,-21,-22,-21,22,127,-6, 
  /* [19][0][][] */ -2,20,2,-127,-9,31,-1,-13, 
  /* [20][0][][] */ -85,-27,71,7,49,93,2,-127, 
  /* [21][0][][] */ -17,-14,29,-27,-14,18,-127,-87, 
  /* [22][0][][] */ 71,-10,9,127,-19,-4,53,42, 
  /* [23][0][][] */ 123,-26,-127,-18,20,-30,7,19, 
  /* [24][0][][] */ -33,26,30,29,7,4,-127,-84, 
  /* [25][0][][] */ 127,12,-91,7,15,-1,6,29, 
  /* [26][0][][] */ -1,52,-24,-127,-30,16,4,-4, 
  /* [27][0][][] */ 127,25,-119,-7,-115,48,22,75, 
  /* [28][0][][] */ -127,-25,-22,14,58,6,0,32, 
  /* [29][0][][] */ -10,-124,-19,-127,-13,24,-23,-17, 
  /* [30][0][][] */ 6,92,117,39,36,-86,127,18, 
  /* [31][0][][] */ -66,-1,-127,44,3,-17,96,100, 
  /* [32][0][][] */ -2,-125,-3,-127,-13,18,-16,-14, 
  /* [33][0][][] */ 9,-121,0,-127,1,4,-6,-13, 
  /* [34][0][][] */ -26,-47,29,-86,37,-54,127,72, 
  /* [35][0][][] */ -127,16,43,4,-116,-15,37,95, 
  /* [36][0][][] */ -127,13,99,-19,-29,6,-27,26, 
  /* [37][0][][] */ 127,11,-6,-3,-70,16,-3,21, 
  /* [38][0][][] */ -85,5,88,28,69,-66,64,127, 
  /* [39][0][][] */ -127,-3,63,-6,-73,17,-5,9, 
  /* [40][0][][] */ 1,28,53,-14,30,-13,127,34, 
  /* [41][0][][] */ 127,-13,-87,2,48,20,3,1, 
  /* [42][0][][] */ -6,-127,31,-7,20,8,-11,-22, 
  /* [43][0][][] */ 36,91,127,-11,52,-116,86,-13, 
  /* [44][0][][] */ 8,-11,-5,106,1,-127,-1,2, 
  /* [45][0][][] */ 127,-32,41,-5,-66,102,7,6, 
  /* [46][0][][] */ 16,113,-16,94,-2,127,20,34, 
  /* [47][0][][] */ -18,33,9,-30,23,-35,127,82, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0046349735930562019, 0.0067663951776921749, 0.0017246033530682325, 0.010457135736942291, 0.0040350425988435745, 0.0045331092551350594, 0.017771853134036064, 0.010637526400387287, 0.014738553203642368, 0.0071084415540099144, 0.0016553648747503757, 0.0055291107855737209, 0.0050470973365008831, 0.012365315109491348, 0.0068168072029948235, 0.024712342768907547, 0.014138822443783283, 0.0043004313483834267, 0.017261210829019547, 0.021497596055269241, 0.0095924418419599533, 0.0034096117597073317, 0.00090204220032319427, 0.0056640063412487507, 0.015399789437651634, 0.009963073767721653, 0.013084963895380497, 0.0050572194159030914, 0.011991924606263638, 0.0093214539811015129, 0.003618042916059494, 0.0065325978212058544, 0.010122055187821388, 0.0036177185829728842, 0.0059140897355973721, 0.004972018301486969, 0.0075628357008099556, 0.015463485382497311, 0.0061863185837864876, 0.0073886564932763577, 0.015217717736959457, 0.0078036496415734291, 0.0097292903810739517, 0.0032953133340924978, 0.018479617312550545, 0.0075222724117338657, 0.0090846465900540352, 0.0035495278425514698, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 4654, -4947, -830, 3294, 1902, 894, -3812, 3619, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 8.422299288213253e-05, 0.0001411090197507292, 0.00010700503480620682, 6.4418774854857475e-05, 0.00012143142521381378, 0.00017744286742527038, 8.5841267718933523e-05, 0.00018866588652599603, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -28,-8,-50,-41,-22,39,-127,-9, 
  /* [1][0][][] */ 27,93,-6,127,16,-11,-11,-29, 
  /* [2][0][][] */ 127,-1,-24,-59,-52,48,94,-46, 
  /* [3][0][][] */ 12,-127,32,-77,19,-96,30,66, 
  /* [4][0][][] */ 127,-4,-56,-2,33,-11,-121,-47, 
  /* [5][0][][] */ -1,-30,6,34,2,-127,1,14, 
  /* [6][0][][] */ 124,-29,127,3,122,-28,-11,-5, 
  /* [7][0][][] */ -127,-1,-91,-5,-89,4,25,-2, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0035794770810753107, 0.0059971329756081104, 0.004547713790088892, 0.0027377980295568705, 0.0051608355715870857, 0.0075413216836750507, 0.0036482538562268019, 0.00801829993724823, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -10338, 11764, 94, -11980, -556, -15450, 120, 244, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00031453132396563888, 0.00035749116796068847, 0.00025997645570896566, 0.00031526960083283484, 0.00022209048620425165, 0.00033416136284358799, 0.00078922545071691275, 0.0017076539807021618, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -5,4,22,18,1,2,9,25, 3,3,-28,127,-20,8,-3,21, 0,3,-9,12,-7,6,-5,25, 
  /* [0][1][][] */ -5,-3,127,-25,127,2,-110,30, 127,-127,-91,6,-96,127,-14,-127, -26,0,20,-24,-4,2,127,32, 
  /* [0][2][][] */ 5,-4,17,7,10,-1,17,24, 5,-1,-36,3,-20,4,-8,-107, -5,-5,-5,-1,1,2,-4,31, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.013367581181228161, 0.015193374827504158, 0.011048998683691025, 0.013398957438766956, 0.0094388453289866447, 0.014201857149600983, 0.033542081713676453, 0.072575293481349945, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 19196, 10530, -1239, 36008, 3850, 7785, 82227, 3764, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00011852959141833708, 0.00019949856505263597, 0.00011164377792738378, 7.6946169428993016e-05, 0.00018948446086142212, 0.0002794097235891968, 1.4002426723891404e-05, 4.2881540139205754e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -55, 52, 11, 
  /* [0][1][][] */ -127, 124, 2, 
  /* [0][2][][] */ -42, 47, 1, 
  /* [1][0][][] */ 58, 127, 34, 
  /* [1][1][][] */ -68, -80, -45, 
  /* [1][2][][] */ 7, -42, 5, 
  /* [2][0][][] */ 32, 29, -45, 
  /* [2][1][][] */ 53, 70, -127, 
  /* [2][2][][] */ 22, 33, -58, 
  /* [3][0][][] */ 40, 50, 18, 
  /* [3][1][][] */ 50, 71, 23, 
  /* [3][2][][] */ -81, -127, -59, 
  /* [4][0][][] */ 3, -53, 47, 
  /* [4][1][][] */ 15, -127, 110, 
  /* [4][2][][] */ 5, -37, 31, 
  /* [5][0][][] */ 2, -55, 1, 
  /* [5][1][][] */ 0, 127, 3, 
  /* [5][2][][] */ 1, -74, 1, 
  /* [6][0][][] */ -16, -80, -4, 
  /* [6][1][][] */ -24, -127, -14, 
  /* [6][2][][] */ -18, -55, -3, 
  /* [7][0][][] */ 41, -127, 25, 
  /* [7][1][][] */ -16, 0, -11, 
  /* [7][2][][] */ -21, 73, -13, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.030225044116377831, 0.050872132182121277, 0.028469162061810493, 0.019621271640062332, 0.048318535089492798, 0.071249477565288544, 0.0035706185735762119, 0.010934792459011078, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.058528445661067963, } };
const TfArray<1, int> quant46_zero = { 1, { 40 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.065452158451080322, } };
const TfArray<1, int> quant47_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.036557149142026901, } };
const TfArray<1, int> quant51_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.058617126196622849, } };
const TfArray<1, int> quant54_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.069088295102119446, } };
const TfArray<1, int> quant55_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023001480847597122, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023001480847597122, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.018637189641594887, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.038469042629003525, } };
const TfArray<1, int> quant59_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.017214644700288773, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.016252359375357628, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.027516219764947891, } };
const TfArray<1, int> quant62_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.040517400950193405, } };
const TfArray<1, int> quant63_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.01575184054672718, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.022119786590337753, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.035620484501123428, } };
const TfArray<1, int> quant66_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.056312572211027145, } };
const TfArray<1, int> quant67_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.017622627317905426, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.025307253003120422, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.060601260513067245, } };
const TfArray<1, int> quant70_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,6,6,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension48, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension56, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension60, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension62, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4320), (TfLiteIntArray*)&g0::tensor_dimension63, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension64, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2016), (TfLiteIntArray*)&g0::tensor_dimension66, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension67, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension69, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80), (TfLiteIntArray*)&g0::tensor_dimension70, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
